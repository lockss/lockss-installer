#!/bin/env bash
# ---------------------------------------------------------------------------
# _utils_solr: utility functions to access the java SolrArtifactIndexAdmin tool.
#  These routines should not be called while solr is running.
#
# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Revision history:
# ---------------------------------------------------------------------------

##
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##
. "${_D0}/_util"

SOLR_TOOLS_JAR="laaws-repository-tools.jar"
SOLR_TOOLS_GROUPID="org.lockss.laaws"
SOLR_TOOLS_ARTIFACTID="laaws-repository-tools"
SOLR_TOOLS_VERSION="2.0.8.0-SNAPSHOT"
SOLR_HOME="lockss-stack-solr-data"
SOLR_CORE_NAME=lockss-repo
SOLR_ENDPOINT=http://localhost:8983/solr/${SOLR_CORE_NAME}
SOLR_IMG="solr"
SOLR_VERSION="8.11.2-slim"
SOLR_UPDATE_NAME="lockss_solr_update"
SOLR_USER="8983:8983"
REPO_TOOLS_JAR=${LIB_DIR}/${SOLR_TOOLS_JAR}

# Download the repository tools jar if it is missing
# This is equivalent to the command line command
# nxfetch.sh -q -i "org.lockss.laaws:laaws-repository-tools:2.0.7.0-SNAPSHOT" -c "with-deps" -e "jar" -o "scripts/lib/laaws-repository-tools.jar"
ensure_repository_tools() {
  if [ ! -f "${REPO_TOOLS_JAR}" ]; then
    echo "  ---------------------------  "
    msg "Did not locate repository tools jar at ${REPO_TOOLS_JAR}; downloading from Maven..."
    ${_D0}/lib/nxfetch.sh -s -q -i "${SOLR_TOOLS_GROUPID}:${SOLR_TOOLS_ARTIFACTID}:${SOLR_TOOLS_VERSION}" -c "with-deps" -e "jar" -o ${REPO_TOOLS_JAR} &&
      chown ${LOCKSS_USER} "${REPO_TOOLS_JAR}"
    echo "  ---------------------------  "
  fi
}

ensure_lockss_stopped() {
  echo "  ---------------------------  "
  msg "Stopping all lockss stacks and containers..."
  docker stack ls | grep 'lockss-stack' | awk '{print $1}' | xargs docker stack rm
  docker ps -a | grep 'lockss' | awk '{print $1}' | xargs docker container stop &&
    msg "All lockss stacks and containers stopped."
  echo "  ---------------------------  "
}

create_standalone_solr() {
    msg "Creating standalone solr instance ${SOLR_UPDATE_NAME} on volume ${REPO_PATH}"
    if ! docker container ps -a | grep ${SOLR_UPDATE_NAME} &> /dev/null; then
      docker run -d -v "${REPO_PATH}":/opt/solr/server/solr -p 8983:8983 --name ${SOLR_UPDATE_NAME} ${SOLR_IMG}:${SOLR_VERSION}
      docker container exec -it ${SOLR_UPDATE_NAME} wait-for-solr.sh
      sleep 10
      msg "Standalone solr instance ${SOLR_UPDATE_NAME} started."
    else
      start_standalone_solr
    fi
    echo "  ---------------------------  "
}

remove_standalone_solr() {
  echo "  ---------------------------  "
  msg "Removing standalone solr instance ${SOLR_UPDATE_NAME}."
  stop_standalone_solr
  docker container rm ${SOLR_UPDATE_NAME} &> /dev/null
  sleep 10
  msg "Standalone solr instance ${SOLR_UPDATE_NAME} removed."
  echo "  ---------------------------  "
}

start_standalone_solr() {
  echo "  ---------------------------  "
  msg "Starting standalone solr instance ${SOLR_UPDATE_NAME}."
  docker container start ${SOLR_UPDATE_NAME}
  docker container exec -it ${SOLR_UPDATE_NAME} wait-for-solr.sh
  sleep 10
  msg "Standalone solr instance ${SOLR_UPDATE_NAME} started."
  echo "  ---------------------------  "
}

stop_standalone_solr() {
  echo "  ---------------------------  "
  msg "Stopping standalone solr instance ${SOLR_UPDATE_NAME}."
  docker container exec -it ${SOLR_UPDATE_NAME} stop-local-solr
  docker container stop ${SOLR_UPDATE_NAME}
  sleep 10
  msg "Standalone solr instance ${SOLR_UPDATE_NAME} stopped."
  echo "  ---------------------------  "
}

# Exit codes from the create...:
# 0 = Solr core creation succeeded
# 1 = Solr core creation failed
create_new_core() {
  echo "  ---------------------------  "
  msg "Creating new core..."
  java -jar "${REPO_TOOLS_JAR}" --action create "$@"
  res=$?
  msg "Create core finished with $res."
  echo "  ---------------------------  "
  return $res
}

# Exit codes from the verify...:
# 0 = Solr core is up-to-date.
# 1 = Solr core is missing, needs to be created.
# 2 = Solr core needs an update (Lucene index or LOCKSS configuration set).
# 4 = Solr core reindex is in-progress.
# 8 = Solr core is in an inconsistent state.
verify_core() {
  echo "  ---------------------------  "
  msg "Verifing solr core ..."
  java -jar "${REPO_TOOLS_JAR}" --action verify "$@"
  res=$?
  sleep 10
  msg "Completed verify with result $res."
  echo "  ---------------------------  "
  return $res
}

ensure_solr_owner() {
  msg "Restoring directory permissions to ${SOLR_USER}..."
  chown -R "${SOLR_USER}" "${REPO_PATH}" ||
    err_exit "Attempt to change ownership to ${SOLR_USER} on ${REPO_PATH} failed."
}

# Exit codes from the update...:
# 0 = Solr core update succeeded
# 1 = Solr core update failed
update_core() {
  echo "  ---------------------------  "
  msg "Updating solr core..."
  update_needed="true"
  # Perform Lucene index upgrade (no-op if already up-to-date)
  echo "  ---------------------------  "
  msg " Upgrading lucene index."
  java -jar ${REPO_TOOLS_JAR} --action upgrade-lucene-index "$@" &&
    msg "Lucene index upgrade complete."
  echo "  ---------------------------  "
  # Install new LOCKSS config sets and apply post-installation changes
  while [ $update_needed == "true" ]
  do
    echo "  ---------------------------  "
    msg "Checking lockss confset for changes..."
    java -jar ${REPO_TOOLS_JAR}  --action update-lockss-configset "$@"
    result=$?
    sleep 10
    case ${result} in
    0)
      echo "  ---------------------------  "
      msg "A new lockss configset has been installed. Applying configset changes..."
      create_standalone_solr
      ensure_solr_owner
      java -jar ${REPO_TOOLS_JAR} --action apply-lockss-configset-changes --endpoint ${SOLR_ENDPOINT}
      res=$?
      sleep 10
      echo "  ---------------------------  "
      if [ $res != 0 ]; then
        err "${_0} Attempt to update configset failed with err: $res"
        return 1
      fi
      msg "Stopping solr and checking for additional changes...."
      stop_standalone_solr
      ;;
    1)
      echo "  ---------------------------  "
      msg "${_0}: No configset installed to ${REPO_NAME}, already up to date."
      return 0
      ;;
    2)
      echo "  ---------------------------  "
      err "${_0} Attempt to install new configset to ${REPO_NAME} failed."
      return 1
     ;;
    *)
      echo "  ---------------------------  "
      err "${_0} Attempt to update solr core ${REPO_NAME} returned unknown result: ${result}."
      err "${_0} Contact lockss-support@lockss.org to resolve this issue."
      echo "  ---------------------------  "
      return 1
      ;;
    esac
  done
  return 0
}


verify_and_update_lockss_core() {

  REPO_NAME=${1}
  REPO_PATH=${2}

  ensure_repository_tools
  ensure_lockss_stopped
  ensure_solr_owner

  verify_core --core "${REPO_NAME}" --local "${REPO_PATH}"
  result=$?

  #switch based on the return value
  case ${result} in
  0)
    echo "  ---------------------------  "
    msg "${_0}: Solr core is up-to-date."
    return 0
    ;;
  1)
    echo "  ---------------------------  "
    msg "${_0}: Creating a new Solr core repo for ${REPO_NAME} in ${REPO_PATH}."
    create_new_core --core "${REPO_NAME}" --local "${REPO_PATH}"
    return $?
    ;;
  2)
    echo "  ---------------------------  "
    msg "${_0} Solr core ${REPO_NAME} needs to be updated, this may take some time..."
    update_core --core "${REPO_NAME}" --local "${REPO_PATH}"
    ret=$?
    remove_standalone_solr
    return $ret
    ;;
  4)
    echo "  ---------------------------  "
    msg "${_0} Solr core ${REPO_NAME} is already reindexing..."
    return 0
    ;;
  8)
    echo "  ---------------------------  "
    msg "${_0} Solr core ${REPO_NAME} is in inconsistent state."
    err "${_0} Contact lockss-support@lockss.org to resolve this issue."
    echo "  ---------------------------  "
    return 1
    ;;
  *)
    echo "  ---------------------------  "
    err "${_0} Attempt to verify solr core ${REPO_NAME} returned unknown result: ${result}."
    err "${_0} Contact lockss-support@lockss.org to resolve this issue."
    echo "  ---------------------------  "
    return ${result}
    ;;
  esac

}
