#!/usr/bin/env bash

# Copyright (c) 2000-2023, Board of Trustees of Leland Stanford Jr. University
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

##
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Regularized Common Paths
##
COMPOSE_DIR="$(cd "${_D0}/.." >/dev/null 2>&1 && pwd)"
CONFIG_DIR="${COMPOSE_DIR}/config"
SCRIPTS_DIR="${COMPOSE_DIR}/scripts"
LIB_DIR="${SCRIPTS_DIR}/lib"
UPDATES_DIR="${SCRIPTS_DIR}/upgrades"
DOCKER_CONFIGS_DIR="${CONFIG_DIR}/configs"
TEMPLATES_DIR="${CONFIG_DIR}/templates"
USEROPTS_DIR="${CONFIG_DIR}/useropts"

##
## Logging and messaging utilities.
##
log_script_entry() {
  logger_debug "Running script ${1}"
}

log_script_exit() {
  logger_debug "Exiting script ${1}"
}

logger_init() {
  if [ -r ${LIB_DIR}/log4sh ]; then
    if [ -z "$LOCKSS_SCRIPT_LOG_DIR" ]; then
      err "LOCKSS_SCRIPT_LOG_DIR is not defined."
      err_exit "Run scripts/configure-lockss to assign value."
    else
      LOG4SH_CONFIGURATION="${SCRIPTS_DIR}/log4sh.properties"
    fi
    . ${LIB_DIR}/log4sh
    if [ -z "${LOCKSS_LOGGER_INITED}" ]; then
      logger_info "$(${SCRIPTS_DIR}/installer-version)"
      export LOCKSS_LOGGER_INITED=1
    fi
  else
    err_exit "logger_error: could not load ${LIB_DIR}/log4sh)" >&2
  fi
}

# Used by scripts that do not have a logger available
err() {
  echo "$*" >&2
}

# Used by scripts that do not have a logger available
err_exit() {
  echo "$*" >&2
  exit 1
}

# Used by scripts that do not have a logger available
msg() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*"
}

# Source env.sh and optionally env.sh.opt as env vars
# source_env <stack-name>
source_env() {
  local stack="$1"
  set -a
  . "${DOCKER_CONFIGS_DIR}/${stack}/env.sh"
  if [[ -f "${DOCKER_CONFIGS_DIR}/${stack}/env.sh.opt" ]]; then
  . "${DOCKER_CONFIGS_DIR}/${stack}/env.sh.opt"
  fi
  if [[ -f "${DOCKER_CONFIGS_DIR}/${stack}/env.sh.upgrade" ]]; then
  . "${DOCKER_CONFIGS_DIR}/${stack}/env.sh.upgrade"
  fi

  set +a
}

# Source system config as env vars
source_config() {
  set -a
  . "${CONFIG_DIR}/system.cfg"
  set +a
}

# perform a kubectl command using whichever flavor of k8s that's installed
kubectl_cmd() {
  if [ -z "${KUBECTL_CMD}" ]; then
    err_exit "Script error: KUBECTL_CMD hasn't been set."
  fi
  ${KUBECTL_CMD} "$@"
}

# perform kubectl command in the lockss namespace
kubectl_lockss() {
  kubectl_cmd -n lockss "$@"
}

set_k3s_bin_dir() {
  K3S_BIN_DIR="/usr/local/bin"
  if [ -n "${INSTALL_K3S_BIN_DIR}" ]; then
    if [ -x "${INSTALL_K3S_BIN_DIR}"/k3s ]; then
      K3S_BIN_DIR=${INSTALL_K3S_BIN_DIR}
    fi
  else
    if [ -x /usr/local/bin/k3s ]; then
      K3S_BIN_DIR=/usr/local/bin
    elif [ -x /opt/bin/k3s ]; then
      K3S_BIN_DIR=/opt/bin
    fi
  fi
}


#Check_Runnable()
#{
#  Check for an available kubernetes node.
#  Create Namespace
#}
Check_Runnable() {
  Check_LOCKSS_User
  if ! kubectl_cmd get node | grep -q "Ready"; then
    err_exit "No available kubernetes node. Please start kubernetes node"
  fi
  if ! kubectl_cmd get namespace "lockss" &>/dev/null; then
    kubectl_cmd create namespace "lockss" >/dev/null || err_exit "Unable to create lockss namespace."
  fi
}

# Checks whether the "lockss" namespace contains any active deployments
Check_Stopped() {
  if ! kubectl_cmd get deployments -n lockss 2>&1 | grep -q "No resources found" ; then
    err_exit "LOCKSS components are still deployed under Kubernetes; please stop LOCKSS and try again."
  fi
}

Check_Configured() {
  Check_VarDef "LOCKSS_SOLR_USER"
  Check_VarDef "LOCKSS_SOLR_PASSWD"
  Check_VarDef "LOCKSS_SOLR_PASSWD_HASH"
  Check_VarDef "LOCKSS_CONTAINER_SUBNETS"
  Check_VarDef "KUBECTL_CMD"
#TODO: Add container subnet change check
}

Check_Upgraded() {
  local OLD_VERSION_FILE="${LOCKSS_DATA_DIR}/VERSION"
  local NEW_VERSION_FILE="${COMPOSE_DIR}/VERSION"

  [ ! -f "${OLD_VERSION_FILE}" ] && return 0
  if ! diff -iwB --new-file "${OLD_VERSION_FILE}" "${NEW_VERSION_FILE}" &> /dev/null; then
    local OLD_VERSION="$(<"${OLD_VERSION_FILE}")"
    [ -f "${NEW_VERSION_FILE}" ] && local NEW_VERSION="$(<"${NEW_VERSION_FILE}")"

    printf -v err_msg "Please perform an upgrade first (current version: %s, required version: %s)" \
        "${OLD_VERSION:-unknown}" "${NEW_VERSION:-unknown}"

    err_exit "${err_msg}"
  fi
}

Copy_Lockss_Version() {
  cp -f ${COMPOSE_DIR}/VERSION ${LOCKSS_DATA_DIR}
}

Set_Lockss_Version() {
  echo "$1" > "${LOCKSS_DATA_DIR}/VERSION"
}

Check_Version_Match() {
  CUR_VERSION="$1"
  MAJOR="$2"
  MINOR="$3"

  UPGRADE_FROM="${MAJOR}\.${MINOR}(\.([[:digit:]]+))?(-([[:alnum:]]+))?"

  if [[ "$CUR_VERSION" =~ $UPGRADE_FROM ]]; then
    MATCH_BUILD_NUM=${BASH_REMATCH[2]}
    MATCH_SUFFIX=${BASH_REMATCH[4]}
    return 0
  fi

  return 1
}

Parse_Lockss_Version() {
  CUR_VERSION="$1"
  UPGRADE_FROM="([[:digit:]]+)\.([[:digit:]]+)(\.([[:digit:]]+))?(-([[:alnum:]]+))?"

  if [[ "$CUR_VERSION" =~ $UPGRADE_FROM ]]; then
    MATCH_MAJOR=${BASH_REMATCH[1]}
    MATCH_MINOR=${BASH_REMATCH[2]}
    MATCH_BUILD_NUM=${BASH_REMATCH[4]}
    MATCH_SUFFIX=${BASH_REMATCH[6]}
    return 0
  fi

  return 1
}

Check_K8s_Command() {
    if [ "X${KUBECTL_CMD}" = X ]; then
    if kubepath=$(command -v k3s); then
      KUBECTL_CMD="${kubepath} kubectl"
      K8S_FLAVOR=k3s
    elif kubepath=$(command -v microk8s); then
      KUBECTL_CMD="${kubepath} kubectl"
      K8S_FLAVOR=microk8s
    elif kubepath=$(command -v kubectl); then
      KUBECTL_CMD="${kubepath}"
      K8S_FLAVOR=k8s
    fi
  fi
}
Check_LOCKSS_User() {
  if ! id "lockss" >/dev/null; then
    err_exit "${_0}: There is no 'lockss' user account. Please create one to continue."
  fi
}

##
## function Check_Docker
##

Check_Docker() {
  if ! docker info >/dev/null; then
    err_exit "${_0}: Docker is not running"
  fi
}

##
## Check For installed secret
##
Check_Secret() {
  if ! kubectl_cmd get secret -n lockss ${1} &>/dev/null; then
    err "${1}: Kubernetes Secret does not exist"
    err_exit "Run scripts/configure-lockss."
  fi

}

Check_VarDef() {
  local env_var="${1}"
  if [ -z "$env_var" ]; then
      err "$env_var is not defined."
      err_exit "Run scripts/configure-lockss to assign value."
  fi
}

##
## Store a kubernetes secret, deleting existing secret if it exists.
##
Store_Secret() {
  local NAME="${1}"
  local VALUE="${2}"
  kubectl_cmd delete secret "${NAME}" -n lockss &>/dev/null
  echo "Storing ${NAME} as a kubernetes secret .."
  if ! kubectl_cmd create secret generic "${NAME}" --from-literal="${NAME}"="${VALUE}" -n lockss; then
    err_exit "Kubernetes secret creation failed for ${NAME}"
  else
    return 0
  fi
}

declare -A secrets_to_store

##
## Remember a kubernetes secret to be stored later
##
Add_Secret() {
  local NAME="${1}"
  local VALUE="${2}"
  secrets_to_store["${NAME}"]="${VALUE}"
}

##
## Clear the saved secrets array
##
Clear_Secrets() {
  secrets_to_store=()
}

##
## Store the secrets to k8s
##
Store_All_Secrets() {
  for x in ${!secrets_to_store[@]}; do
    Store_Secret "${x}" "${secrets_to_store[${x}]}"
  done
}

##
## Check for an installed lockss secret, return 0 if found 1 otherwise.
##
Is_Secret_Installed() {
  if ! kubectl_cmd get secret -n lockss ${1} &>/dev/null; then
    return 1
  else
    return 0
  fi
}

##
## Return 0 iff all secrets in arglist are installed.
##
Are_Secrets_Installed() {
  for s in "$@"; do
    if ! Is_Secret_Installed "${s}"; then
      return 1
    fi
  done
  return 0
}

Check_Volume() {
  #    if ! docker volume inspect ${1} &> /dev/null; then
  if ! kubectl_cmd get pv ${1} &>/dev/null; then
    err "${1}: Docker Volume has not been installed."
    err_exit "${1}: Run lockss-install script."
  fi
}

Check_Config() {
  #    if ! docker config inspect ${1} &> /dev/null; then
  if ! kubectl_cmd get config ${1} &>/dev/null; then
    err "${1}: Config file is missing. Run configure and install scripts.."
    err_exit "${1}: Run lockss-install script."
  fi
}

ensure_lockss_user() {
  case ${OS_TYPE} in
  Linux)
    if ! id "lockss" &>/dev/null; then
      echo "${_0}: There is no 'lockss' user account."
      ask_for_input "OK to create account for 'lockss' user?" Y
      if is_yes "${ANS}"; then
        if useradd -s /bin/false lockss; then
          echo "Created user 'lockss'"
        else
          err_exit "Can't create user lockss. Please create a user 'lockss' before continuing."
        fi
      fi
    fi
    ;;
  *)
    err_exit "Unsupported system. Please create a user 'lockss' before continuing."
    ;;
  esac
}

##
## function Check_Installed
##

Check_Installed() {
  while [ "X${1}" != "X" ]; do
    if ! command -v "${1}" &>/dev/null; then
      err_exit "${_0}: ${1} must be on lockss user's PATH.  Please fix and rerun."
    fi
    shift
  done
}

##
## function Get_Value
##

Get_Value() {
  local PAIR="${1}"
  echo "${PAIR}" | sed -e 's@^[^=]\+=@@'
}

Get_Timezone() {
  local timezone="${TZ}"

  if [ -z "${timezone}" ]; then
    if command -v timedatectl &>/dev/null; then
      # Newer versions of timedatectl have 'show' command
      timezone=$(timedatectl show --property=Timezone --value 2>/dev/null)
      # else parse from full status output
      if [ -z "${timezone}" ]; then
        timezone=$(timedatectl | sed -n -r "s/.*Time zone: ([^ \t]+).*/\1/p")
      fi
    fi
  fi
  if [ -z "${timezone}" ]; then
    if -r /etc/timezone; then
      timezone=$(cat /etc/timezone)
    elif -r /etc/localtime; then
      timezone=$(${READLINK} /etc/localtime | sed -e 's/^.*zoneinfo\///')
    fi
  fi
  echo ${timezone}
}

##
## function Wait_For_200
##

Wait_For_200() {
  local HOST="${1}"
  local PORT="${2}"
  local SLEEP="${3}"
  if [ "X${SLEEP}" = "X" ]; then
    SLEEP='30'
  fi
  local URL="http://${HOST}:${PORT}/status"
  while true; do
    echo "Waiting for ${URL} ... " && curl --silent --fail --output /dev/null "${URL}" && echo "succeeded" && break
    echo "failed; retrying in ${SLEEP} seconds" && sleep "${SLEEP}"
  done
}

##
## function Wait_For_Port
##

Wait_For_Port() {
  local HOST="${1}"
  local PORT="${2}"
  local SLEEP="${3}"
  if [ "X${SLEEP}" = "X" ]; then
    SLEEP='30'
  fi
  while true; do
    echo "Waiting for ${HOST}:${PORT} ... " && nc -z "${HOST}" "${PORT}" && echo "succeeded" && break
    echo "failed; retrying in ${SLEEP} seconds" && sleep "${SLEEP}"
  done
}

# check if running as root
am_i_root() {
  [ "$(id -u)" -eq 0 ]
}

is_lockss_running() {
  kubectl_lockss get pods 2>/dev/null | grep -q 'lockss-configuration-service'
}

#
# Read existing config info and populate environment
# Must be run before LOCKSS daemon can be started
#
read_config() {
  local FILE="$1"
  local OLD_IFS="${IFS}"
  IFS='
'
  for A in $(sed -e '/[a-zA-Z0-9_]* *= *.*/!d' -e 's/\([a-zA-Z0-9_]*\) *= *\(.*\)/\
\1=\2/' "${FILE}"); do
    eval "$A"
  done
  IFS="${OLD_IFS}"
}

is_replay() {
  [[ -n "${is_replay}" ]] && return 0
  return 1
}

ask_for_input() {
  local prompt="${1}"
  local current="${2}"
  local default="${3}"
  if [ -n "${current}" ]; then
    default="${current}"
  fi
  case "${prompt}" in
    *\?) echo -n "${prompt} [${default}] " ;;
    *)   echo -n "${prompt}: [${default}] " ;;
  esac
  if is_replay && [[ -n "${current}" ]]; then
    echo
    ANS="${current}"
  else
    # force "OK to store this configuration" question
    OK_TO_STORE_WITHOUT_CONFIRMATION=""
    read ANS
    if [ -z "${ANS}" ]; then
      ANS="${default}"
    fi
  fi
}

ask_for_input_shadow() {
  echo -n "$1: "
  if test -t 0 ; then
    local STTY_ORIG=$(stty -g)
    stty -echo
    read ANS
    stty "$STTY_ORIG"
  else
    read ANS
  fi
  echo
}

SHA256SUM=sha256sum

ask_for_password() {
  local prompt_msg="${1}"
  local old_pass_hash="${2}"
  local old_pass_clear="${3}"
  local secrets="${4}"
  local sha256
  PASSWD_HASH=
  PASSWD_CLEAR=

  local have_existing_password=
  if [ -n "${old_pass_hash}" -o -n "${old_pass_clear}" ]; then
    have_existing_password=1
  fi

  # If this password has associated secrets, check whether they're already
  # present
  if [ -n "${have_existing_password}" -a -n "${secrets}" ]; then
    if ! Are_Secrets_Installed ${secrets}; then
      have_existing_password=
    fi
  fi

  while [ -z "${PASSWD_HASH}" ]; do
    local p1=
    while [ -z "${p1}" ]; do
      # if we have an existing password, and any required secrets are
      # present, don't require reentering the password
      if [ -n "${have_existing_password}" ]; then
        if is_replay; then
	  PASSWD_HASH="${old_pass_hash}"
	  PASSWD_CLEAR="${old_pass_clear}"
	  return 0
        fi
	ask_for_input_shadow "${prompt_msg} (<enter> to leave unchanged)"
	if [ -z "${ANS}" ]; then
	  PASSWD_HASH="${old_pass_hash}"
	  PASSWD_CLEAR="${old_pass_clear}"
	  return 0
	else
	  old_pass_hash=
	  p1="${ANS}"
	fi
      else
	ask_for_input_shadow "${prompt_msg}"
	p1="${ANS}"
      fi
    done
    ask_for_input_shadow "${prompt_msg} (again)"
    if [ "X${ANS}" = "X${p1}" ]; then
      sha256=$(echo -n "${p1}" | ${SHA256SUM})
      sha256=$(echo ${sha256} | sed 's/ .*$//')
      PASSWD_HASH="SHA-256:${sha256}"
      PASSWD_CLEAR="${p1}"
    else
      echo "Passwords don't match"
    fi
  done
}

is_yes() {
  case "${1}" in
    y | Y | yes | YES | Yes)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

is_true() {
  case "${1}" in
    t | T | true | TRUE | True)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

to_yes_no() {
  if is_true "${1}"; then
    echo "Y"
  else
    echo "N"
  fi
}

to_yes_no_or_blank() {
  [ -z "${1}" ] && return
  to_yes_no "${1}"
}

to_true_false() {
  case "${1}" in
    y | Y | yes | YES | Yes)
      echo "true"
      ;;
    *)
      echo "false"
      ;;
  esac
}

is_pos() {
  pattern='^[0-9]+$'
  [[ $1 =~ $pattern ]]
  return $?
}

# setup_storage_dirs CONF_FILE CONFIG_USER
# return nonzero if any errors
setup_storage_dirs() {
  local CONF_FILE="$1"
  local USER="$2"
  local ERRORS="0"
  echo "Checking content storage directory(s)"
  read_config ${CONF_FILE}
  IFS=';' read -r -a repoPaths <<< "${LOCKSS_REPO_HOST_DIRS}"

  for dir in "${repoPaths[@]}"; do
    if ! init_one_dir "${dir}" ${USER} 750; then
        echo "${dir} cannot be created or written by ${USER}." >&2
        ERRORS=1
    fi
  done
  if [ "${LOCKSS_LOGS_DIR}" != "${LOCKSS_DATA_DIR}" ]; then
      if ! init_one_dir ${LOCKSS_LOGS_DIR} ${USER} 755; then
        echo "${dir} cannot be created or written by ${USER}." >&2
        ERRORS=1
      fi
  fi
  if [ "${LOCKSS_TMPDIR}" != "${LOCKSS_DATA_DIR}" ]; then
      if ! init_one_dir ${LOCKSS_TMPDIR} ${USER} 750; then
        echo "${dir} cannot be created or written by ${USER}." >&2
        ERRORS=1
      fi
  fi
  if [ "${LOCKSS_SCRIPT_LOG_DIR}" != "${LOCKSS_DATA_DIR}" ]; then
      if ! init_one_dir ${LOCKSS_SCRIPT_LOG_DIR} ${USER} 755; then
        echo "${dir} cannot be created or written by ${USER}." >&2
        ERRORS=1
      fi
  fi
  return $ERRORS
}

# init_one_dir dir user mode
init_one_dir() {
  local DIR="$1"
  local USER="$2"
  local MODE="$3"
  if [ -z "${MODE}" ]; then
      MODE="750"
  fi
  if [ ! -d "${DIR}" ]; then
    ask_for_input "${DIR} does not exist; do you want to create it?" Y
    if is_yes "${ANS}"; then
      mkdir -p "${DIR}"
      if [ "X${CONFIG_USER}" != "X${USER}" ]; then
        chown ${USER} "${DIR}"
      fi
      chmod "${MODE}" "${DIR}"
      if check_writable "${DIR}" ${USER}; then
        return 0
      else
        echo "${DIR} not writable by user ${USER}"
        echo " Please make it so (check parent dir execute bits)"
        echo " LOCKSS will not run properly without it."
      fi
    else
      echo "Please create ${DIR} and make it writable by user ${USER};"
      echo " LOCKSS will not run properly without it."
    fi
    return 0
  fi
  if check_writable "${DIR}" $USER; then
    echo "${DIR} exists and is writable by ${USER}"
  else
    ask_for_input "${DIR} is not writable; do you want to make it writable?" Y
    if is_yes "${ANS}"; then
      chown ${USER} "${DIR}"
      chmod ${MODE} "${DIR}"
      if check_writable "${DIR}" $USER; then
        return 0
      else
        echo "${DIR} still not writable by user ${USER}"
        echo " Please make it so (check parent dir execute bits)"
        echo " LOCKSS will not run properly without it."
      fi
    else
      echo "Please ensure that ${DIR} is writable by user ${USER};"
      echo " LOCKSS will not run properly without it."
    fi
    return 1
  fi
}

# Creates "reindex artifacts" signal for LOCKSS repository
signal_reindex() {
  local STACK=$1
  local REPO_INDEX_STATE_DIR=${LOCKSS_DATA_DIR}/${STACK}-repo-data/state/index
  mkdir -p "${REPO_INDEX_STATE_DIR}"
  touch "${REPO_INDEX_STATE_DIR}"/reindex
}

# check_writable (dir, user)
check_writable() {
  local DIR="$1"
  true &
  local PROBE_FILE=${DIR}/probe_$!
  if [ "X${CONFIG_USER}" != "X${2}" ]; then
    SUDO="sudo -u ${2}"
  else
    SUDO=""
  fi
  if ${SUDO} touch ${PROBE_FILE} >/dev/null 2>&1; then
    rm -f ${PROBE_FILE}
    return 0
  fi
  return 1
}

# find_first_file list prefix suffix

# return the first element in list such that the file
# ${prefix}${elem}${suffif} exists.  (I.e., it returns just the list
# element, not the entire filename).
find_first_file() {
  local list="$1"
  local pre="$2"
  local suff="$3"
  local probe
  for x in ${list}; do
    probe=${pre}${x}${suff}
    if [ -e "${probe}" ]; then
        echo "${x}"
        return
    fi
  done
}

#parse_ip4_address inp
parse_ip4_address() {
  local INP=$1
  local OLD_IFS="${IFS}"
  IFS="."
  local COUNT=0
  local GOODCOUNT=0
  local IPADDR=0
  for A in ${INP}; do
    if (expr ${A} + 1 >/dev/null 2>&1); then
      if [ ${A} -ge 0 -a ${A} -lt 256 ]; then
        GOODCOUNT=$(expr ${GOODCOUNT} + 1)
        IPADDR=$(expr ${IPADDR} \* 256 + ${A})
      fi
    fi
    COUNT=$(expr ${COUNT} + 1)
  done
  IFS="${OLD_IFS}"
  if [ ${COUNT} != 4 -o ${GOODCOUNT} != 4 ]; then
    echo 0
  else
    echo ${IPADDR}
  fi
}


guess_ip_address() {
  local all_ips=
  case $(uname -s) in
    Linux)
      all_ips=$(hostname -I 2>/dev/null) || all_ips=$(hostname -i 2>/dev/null) || all_ips=$(ip route get 1 | sed 's/^.*src \([^ ]*\).*$/\1/;q')
      # remove IPv6 addresses
      all_ips=$(echo ${all_ips} | sed -r 's/[^ ]*:[^ ]* *//g')

      if [ -n "${all_ips}" ] ; then
	  echo "${all_ips}" | sed 's/ .*//'
      fi
      ;;
    Darwin)
      ifconfig -a | grep 'inet ' | grep -v 127.0.0.1 | tail -1 | sed 's/.*inet \(.*\) netmask.*/\1/' 2>/dev/null
      ;;
    *)
  esac
}

HOSTNAME_REGEX="^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$"

# valid_hostname hostname
valid_hostname() {
  ( echo "$1" | grep -E -q -e "${HOSTNAME_REGEX}" )
}


# valid_ip4_address address
valid_ip4_address() {
  local IPADDR=$(parse_ip4_address "$1")
  if [ ${IPADDR} -eq 0 ]; then
    return 1
  else
    return 0
  fi
}

# IPv6 regex from https://github.com/labbots/bash-utility?

IPV6_REGEX="^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|\
([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|\
([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|\
([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|\
:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|\
::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|\
(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|\
(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"

# Usage: valid_ip6_address address
valid_ip6_address() {
  [[ "$1" =~ $IPV6_REGEX ]] && return 0 || return 1
}

# Usage: valid_ip_address address
valid_ip_address() {
  ( valid_ip4_address "$1" || valid_ip6_address "$1" ) && return 0 || return 1
}


declare -a VALIDATED_LIST

#
# Usage: valid_ip_address_list ip[;ip...]
# returns 0 if all elements are valid, and sets the array
# VALIDATED_LIST to the elements
#
valid_ip_address_list() {
  VALIDATED_LIST=()
  if [[ -z "${1}" ]] ; then
    echo "IP address list may not be empty" >&2
    return 1
  fi

  if [[ "${1}" =~ " " ]] ; then
    echo "IP address list may not contain spaces" >&2
    return 1
  fi
  local ip
  for ip in ${1//;/ }; do
    if ! valid_ip_address "${ip}" ; then
      echo "${ip} is not a valid IP address" >&2
      VALIDATED_LIST=()
      return 1
    fi
    VALIDATED_LIST+=("${ip}")
  done
  return 0
}

#
# Usage: valid_subnet address
#
valid_subnet() {
  local INP="$1"
  local oct='[0-9]{1,3}'
  if valid_ip4_address "${INP}"; then
    return 0
  elif [[ "${INP}" =~ ^($oct\.$oct\.$oct\.\*)|($oct\.$oct\.\*.\*)|($oct\.\*.\*.\*)$ ]]; then
    return 0
  elif [[ "${INP}" =~ ^([^/]+)/([^/]+)$ ]]; then
    local NET="${BASH_REMATCH[1]}"
    local MASK="${BASH_REMATCH[2]}"
    if ! valid_ip4_address "${NET}"; then
      return 1
    fi
    if valid_ip4_address "${MASK}"; then
      local MASKADDR=$(parse_ip4_address "${MASK}")
      if [[ ${MASKADDR} -eq 0 ]]; then
        return 1
      fi
      # should check that (${MASKADDR}|(-${MASKADDR})) == ${MASKADDR}
      return 0
    elif [[ "${MASK}" -ge 0 && "${MASK}" -le 32 ]]; then
      # should check legal cidr
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}

#
# Usage: valid_subnet_list subnet[;subnet...]
# returns 0 if all elements are valid, and sets the array
# VALIDATED_LIST to the elements
#
valid_subnet_list() {
  VALIDATED_LIST=()
  if [[ -z "${1}" ]] ; then
    echo "subnet list may not be empty" >&2
    return 1
  fi

  if [[ "${1}" =~ " " ]] ; then
    echo "subnet list may not contain spaces" >&2
    return 1
  fi
  local sub
  for sub in ${1//;/ }; do
    if ! valid_subnet "${sub}" ; then
      echo "${sub} is not a valid subnet" >&2
      VALIDATED_LIST=()
      return 1
    fi
    VALIDATED_LIST+=("${sub}")
  done
  return 0
}

#
# Usage: normalize_path PATH
#
# Remove /./ and dir/.. sequences and replace // with / and write result to
# stdout.
#
function normalize_path() {
  # Remove all /./ sequences.
  local path=${1//\/.\//\/}

  # Replace all // sequences with /
  path=${path//\/\//\/}

  # Remove dir/.. sequences.
  while [[ $path =~ ([^/][^/]*/\.\./) ]]; do
    path=${path/${BASH_REMATCH[0]}/}
  done
  # Remove final dir/.. sequence.
  if [[ $path =~ ([^/][^/]*/\.\.$) ]]; then
    path=${path/${BASH_REMATCH[0]}/}
  fi
  # Remove final /. sequence.
  echo "${path%%/.}"
}

# Match /etc/resolv.conf nameserver lines
NAMESERVER_REGEX='^[ \t]*nameserver[ \t]+'

# Match /etc/resolv.conf loopback nameserver lines
LOOPBACK_REGEX="${NAMESERVER_REGEX}(?:localhost|127(\.[0-9]+)*\.[0-9]+|0*(:0*)*:0*1)[ \t]*(#.*)?$"

#
# Usage: has_loopback_resolver FILE
#
# FILE is a file in the format of /etc/resolv.conf
# return true (0) iff the file specifies at least one nameserver on
# a loopback address
#
has_loopback_resolver() {
  local file="$1"
  grep -E -i -q "$LOOPBACK_REGEX" "${file}"
  return
}

#
# Usage: extract_non_loopback_resolvers FILE
#
# FILE is a file in the format of /etc/resolv.conf
# prints a semiconol-separated list of all the non-loopback nameservers
# specified in the file
#
extract_non_loopback_resolvers() {
  local file="$1"
  grep -E -i "$NAMESERVER_REGEX" "${file}" | grep -v -E -i "$LOOPBACK_REGEX" | awk '{print $2}' | xargs | tr ' ' ';'
}

#
# Usage: compare_versions VERSION_A VERSION_B
#
# Where VERSION is major, minor, and revision delimited by a dot. E.g., 7.2.1
#
compare_versions_lte() {
  printf '%s\n%s' "$1" "$2" | sort -C -V
}

compare_versions_lt() {
  ! compare_versions_lte "$2" "$1"
}

#
# Extract_K3s_Version
# Returns a structured version string that can be compared by sort -V
#
Extract_K3s_Version() {
  echo "${1}" | sed -e 's/\+k3s/./'
}

# return absolute path of $1
abspath() {
  ( cd "$(dirname "$1")"
    printf "%s/%s\n" "$(pwd)" "$(basename "$1")" )
}

init_service_arrays() {
  if [ -z ${REQ_SERVICES+x} ]; then
    logger_debug "Setting service array from the config file."
    init_service_arrays_from_config
  else
    logger_debug "Setting service array from commandline arguments."
    init_service_arrays_from_commandline
  fi
}

init_service_arrays_from_commandline() {
  declare -a svcs_arr
  IFS=';' read -r -a svcs_arr <<< "$REQ_SERVICES"
  for svc in "${svcs_arr[@]}"; do
    case ${svc} in
      "cfg"|"config")
        SERVICES+=("cfg")
        ;;
      "mdq")
        SERVICES+=("mdq")
        ;;
      "mdx")
        SERVICES+=("mdx")
        ;;
      "pol"|"poll"|"poller")
        SERVICES+=("pol")
        ;;
      "crawl"|"crawler")
        SERVICES+=("crawl")
        ;;
      "soap")
        SERVICES+=("soap")
        ;;
      "repo")
        SERVICES+=("repo")
        ;;
      "postgres")
        SERVICES+=("postgres")
        ;;
      "solr")
        SERVICES+=("solr")
        ;;
      "hdfs")
        SERVICES+=("hdfs")
        ;;
      "pywb")
        SERVICES+=("pywb")
        ;;
      "openwb"|"openwayback")
        SERVICES+=("openwayback")
        ;;
      *)
        logger_error "Request to deploy unknown service: ${svc}."
        ;;
      esac
done
}

#initialize the service arrays based on system.cfg info.
init_service_arrays_from_config() {
  if ${USE_LOCKSS_CFG}; then
    SERVICES+=("cfg")
  fi
  if ${USE_LOCKSS_MDQ}; then
    SERVICES+=("mdq")
  fi
  if ${USE_LOCKSS_MDX}; then
    SERVICES+=("mdx")
  fi
  if ${USE_LOCKSS_POL}; then
    SERVICES+=("pol")
  fi
   if ${USE_LOCKSS_CRAWL}; then
     SERVICES+=("crawl")
   fi
 if ${USE_LOCKSS_SOAP}; then
    SERVICES+=("soap")
  fi
  if ${USE_LOCKSS_REPO}; then
    SERVICES+=("repo")
  fi
  if ${USE_LOCKSS_POSTGRES}; then
    SERVICES+=("postgres")
  fi
  if ${USE_LOCKSS_SOLR}; then
    SERVICES+=("solr")
  fi
  if ${USE_LOCKSS_HDFS}; then
    SERVICES+=("hdfs")
  fi
  if ${USE_LOCKSS_PYWB}; then
    SERVICES+=("pywb")
   fi
  if ${USE_LOCKSS_OPENWB}; then
    SERVICES+=("openwayback")
  fi
}
