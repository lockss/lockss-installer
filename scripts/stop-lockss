#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# stop-lockss - Stop LOCKSS stack and containers.

# Copyright (c) 2000-2023, Board of Trustees of Leland Stanford Jr. University
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Usage: stop-lockss [-h|--help]
#
# Revision history:
# 2019-04-18 version 1
# ---------------------------------------------------------------------------
PROGNAME=${0##*/}
VERSION="1.0"

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/_util"

# Source system config file
source_config


declare -a secrets=("lockss-ui-pass" "lockss-auth" "lockss-postgres-pass")
declare -a SERVICES
declare -A -r SERVICE_NAMES=(
 [cfg]="lockss-configuration-service"
 [mdq]="lockss-metadata-service"
 [mdx]="lockss-metadata-extraction-service"
 [pol]="lockss-poller-service"
 [crawl]="lockss-crawler-service"
 [soap]="lockss-soap-service"
 [repo]="lockss-repository-service"
 [postgres]="lockss-postgres-service"
 [solr]="lockss-solr-service"
 [hdfs]="lockss-hdfs-service"
 [pywb]="lockss-pywb-service"
 [openwb]="lockss-openwayback-service"
)
STACK_PREFIX="lockss-stack"

clean_up() { # Perform pre-exit housekeeping
  log_script_exit  "${PROGNAME}"
}

logger_error_exit() {
  logger_error "${1:-"Unknown Error"}"
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    logger_error_exit "Program interrupted by user"
    ;;
  TERM)
    logger_error "Program terminated"
    graceful_exit
    ;;
  *)
    logger_error_exit "Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Stop LOCKSS stack and containers.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  -s, --services  A semicolon seperated list of services to stop

_EOF_
  return
}

##
## MAIN
##
# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

undeploy_stack() {
  local stack=${STACK_PREFIX}$1
  # Source env.sh
  source_env "${stack}"
  logger_info "Undeploying stack $stack"
  svc_arr=()
  # if no services req get all running services and stop them.
  if [ -z $REQ_SERVICES ]; then
    logger_info "Stopping all running services."
    services=$(kubectl_lockss get svc -o jsonpath='{.items[*].metadata.name}')
    IFS=' ' read -a svc_arr <<< "$services"
  else
    logger_info "Stopping only requested services."
    for svc in "${SERVICES[@]}"; do
      svc_arr+=(${SERVICE_NAMES[$svc]})
    done
  fi
  # loop through the service array stop everything for that service
	for svc in "${svc_arr[@]}"
	do
    logger_debug "Stopping service ${svc}..."
    # this should delete the deployment, replicaset, pod
    kubectl_lockss delete deployment -l lockss-stack-id=${stack} -l io.kompose.service=${svc} | logger_debug
    kubectl_lockss delete service -l lockss-stack-id=${stack} -l io.kompose.service=${svc} | logger_debug
  done
	for svc in "${svc_arr[@]}"
	do
    podname=$(kubectl_lockss get pod -l lockss-stack-id=${stack} 2> /dev/null | grep "${svc}" )
    logger_debug "Waiting for pod $podname to exit."
    if [ -n "${podanme}" ]; then
      kubectl_lockss wait --for=delete -l lockss-stack-id=${stack} pod ${podname} --timeout=60s | logger_debug
    fi
  done
  # Delete Kubernetes CronJobs
  kubectl_lockss delete cronjob -l lockss-stack-id=${stack} | logger_debug
  logger_info "Pod shutdown complete"
}

# Source system config file
logger_init

log_script_entry "${PROGNAME}"
umask 002

STACK_NUM=0

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  [1-9])
    STACK_NUM=$1
    ;;
  -s | --services)
    export REQ_SERVICES="$2"
    logger_debug "Adding list of service to assemble $REQ_SERVICES"
    shift; shift
    ;;
  -*)
    usage
    logger_error_exit "Unknown option $1"
    ;;
  *)
    logger_debug "Argument $1 to process..."
    ;;
  esac
  shift
done


# Sanity checks
Check_Runnable
Check_Configured
init_service_arrays

if [[ ${STACK_NUM} -eq 0 ]]; then
  undeploy_stack ""
else
  undeploy_stack ${STACK_NUM}
fi
echo "========================================="
number_of_services=$(kubectl_lockss get svc 2> /dev/null | wc -l)
if ((number_of_services > 0)); then
  echo "These LOCKSS services are now running."
  kubectl_lockss get deployments --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
else
  echo "All LOCKSS services are stopped."
fi
echo "========================================="
graceful_exit
