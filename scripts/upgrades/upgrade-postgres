#!/usr/bin/env bash
#
# Copyright (c) 2000-2020, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#
PROGNAME=${0##*/}
VERSION="1.0"

##
## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/../_util"
. "${_D0}/_util_upgrade"

COMPOSE_DIR="$(cd "${_D0}/../.." >/dev/null 2>&1 && pwd)"
CONFIG_DIR="${COMPOSE_DIR}/config"
SCRIPTS_DIR="${COMPOSE_DIR}/scripts"
LIB_DIR="${SCRIPTS_DIR}/lib"
UPDATES_DIR="${SCRIPTS_DIR}/upgrades"
DOCKER_CONFIGS_DIR="${CONFIG_DIR}/configs"
TEMPLATES_DIR="${CONFIG_DIR}/templates"


UPGRADE_ENV_TMPL="${CONFIG_DIR}/env.mustache.upgrade"
STACK_PREFIX="lockss-stack"

SYSTEM_CONF_FILE="${CONFIG_DIR}/system.cfg"
# Source system config file
source_config
STACK_PREFIX="lockss-stack"
POSTGRES_DATA_DIR="${LOCKSS_DATA_DIR}/${STACK_PREFIX}-postgres-data"
POSTGRES_TMP_DIR="${LOCKSS_DATA_DIR}/${STACK_PREFIX}-postgres-tmp"

clean_up() { # Perform pre-exit housekeeping
  restore_env
  "${SCRIPTS_DIR}"/stop-lockss >/dev/null
  log_script_exit  "${PROGNAME}"
}

logger_error_exit() {
  logger_fatal "${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    echo -e "\n$PROGNAME: Program terminated" >&2
    graceful_exit
    ;;
  *)
    error_exit "$PROGNAME: Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help] [-o|--old-version]  [-n|--new-version] [-v]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Upgrade the Postgres version.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  -o, --old-version The version of the old postgres container.
  -n, --new-version The version of the new postgres container.
_EOF_
  return
}

restore_env() {
  if [ -f "${UPGRADE_ENV_TMPL}" ]; then
    rm -f "${UPGRADE_ENV_TMPL}"
  fi
}

check_versions() {
  if [ -z ${NEW_VERSION} ]; then
    NEW_VERSION=${POSTGRES_VERSION}
  fi
  if [ -z ${OLD_VERSION} ]; then
      logger_error_exit "Unable to determine old container version."
  fi
  version_compare $OLD_VERSION $NEW_VERSION
  case $? in
    0)
      logger_error_exit "The current version is identical to the upgrade version $NEW_VERSION."
      ;;
    1)
      logger_error_exit "The current version is newer than the upgrade version $NEW_VERSION."
      ;;
    2)
      logger_info "Upgrading PostgreSQL container from ${OLD_VERSION} to ${NEW_VERSION}."
      ;;
  esac
}

version_compare()
{
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    # Everything after the first character not in [^0-9.] is compared
    local i a=(${1%%[^0-9.]*}) b=(${2%%[^0-9.]*})
    local arem=${1#${1%%[^0-9.]*}} brem=${2#${2%%[^0-9.]*}}
    for ((i=0; i<${#a[@]} || i<${#b[@]}; i++)); do
        if ((10#${a[i]:-0} < 10#${b[i]:-0})); then
            return 2
        elif ((10#${a[i]:-0} > 10#${b[i]:-0})); then
            return 1
        fi
    done
    if [ "$arem" '<' "$brem" ]; then
        return 2
    elif [ "$arem" '>' "$brem" ]; then
        return 1
    fi
    return 0
}

	check_pg_ready()
	{
    echo -n "Waiting for PostgreSQL to be ready for connections. This may take some time."
    # This is effectively a 10 1/2 min wait.
		for i in {1..20}
		do
  		 kubectl_lockss exec ${PODNAME} -- pg_isready -U "${LOCKSS_POSTGRES_USER}"
  			case $? in
    		0)
      		logger_info "PostgreSQL is ready for sql commands."
      		return 0
      		;;
    		1 | 2)
      		logger_trace "PostgreSQl is not responding or is starting up."
      		;;
   	 		3)
      		logger_error_exit "Unable to connect to PostgreSQL container - Invalid arguments."
      		;;
      esac
      echo -n "."
      sleep 30
  	done
  	return 1
	}

start_postgres_service()
{
    #start the postgres service
  	"${SCRIPTS_DIR}"/start-lockss --upgrading -s "postgres" || logger_error_exit "Attempt to start old PostgreSQL failed."
    #wait for the  deployment to be marked as Available
    kubectl_lockss wait deployment lockss-postgres-service --for condition=Available=True --timeout=180s
  	# get the pod name
  	PODNAME=$(kubectl get pods -n lockss --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
  	# check that the postgres is ready for sql commands
  	check_pg_ready  ||  logger_error_exit "Timed out waiting for PostgreSQL to allow sql commands."
}

dump_old_version()
{
  # add the postgres version to the opt file
  echo POSTGRES_VERSION=${OLD_VERSION} | tee "${UPGRADE_ENV_TMPL}"
  # bring up the old version
  start_postgres_service
  # dump the old versions content -c to clear the database on restore
	  kubectl_lockss exec ${PODNAME} -- pg_dumpall -U ${LOCKSS_POSTGRES_USER} -c --if-exists --file="${DUMP_FILE}" ||
	  	logger_error_exit "Unable to perform database dump."
  # shutdown old version
  "${SCRIPTS_DIR}"/stop-lockss  || logger_error_exit "Attempt to stop PostgreSQL failed."

  logger_info "Moving old PostgreSQL directory out of the way..."
  # make this a timed stamp name.
  POSTGRES_DATA_DIR_BAK="${POSTGRES_DATA_DIR}.`date +%Y%m%d%H%M`.bak"
  mv "${POSTGRES_DATA_DIR}" "${POSTGRES_DATA_DIR_BAK}" ||
    logger_error_exit "Unable to backup data dir: ${POSTGRES_DATA_DIR}"
  #reset_svc_data_dir 'postgres' 'sudo'
  restore_env
}

restore_dump()
{
	echo POSTGRES_VERSION=${NEW_VERSION} | tee "${UPGRADE_ENV_TMPL}"
	# bring up the new version
	start_postgres_service
	# load the dump into the new version psql -q -U
  kubectl_lockss exec ${PODNAME} -- psql -q -U "${LOCKSS_POSTGRES_USER}" --file="${DUMP_FILE}" --dbname=postgres >/dev/null ||
   logger_error_exit "Unable to exec into pod to perform database restore."
  logger_info "Successfully restored data to $NEW_VERSION of PostgreSQL."

  logger_info "Upgrading the stored Password for PostgreSQL user $LOCKSS_POSTGRES_USER"
  update_password
  #shutdown the service
  "${SCRIPTS_DIR}"/stop-lockss || logger_error_exit "Attempt to stop running PostgreSQL failed."
  restore_env
}

update_password()
{
# 	echo POSTGRES_VERSION=${NEW_VERSION} | tee "${UPGRADE_ENV_TMPL}"
#  start_postgres_service
  logger_info "Updating stored password to SCRAM-SHA-256..."
	db_pass=$(kubectl get secret -n lockss lockss-postgres-pass -o jsonpath='{.data.lockss-postgres-pass}' | base64 --decode)
  kubectl_lockss exec ${PODNAME} -- psql -U "${LOCKSS_POSTGRES_USER}" --dbname=postgres -c "ALTER USER \"$LOCKSS_POSTGRES_USER\" with password '$db_pass';" ||
    logger_error_exit "Attempt to update stored password failed."
 # restore_env
}

###
## MAIN
###
# Trap signals 1233

trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Parse command-line
while [[ $# -gt 0 ]]; do
  case $1 in
    -h | --help)
      help_message; graceful_exit
      ;;
    -n | --new-version)
      NEW_VERSION="$2"
      shift; shift
      ;;
    -o | --old-version)
      OLD_VERSION="$2"
      shift; shift
      ;;
    *)
      usage
      error_exit "Unknown option $1"
      ;;
  esac
done

# Sanity checks
Check_Runnable
Check_Configured

logger_init
check_versions

DUMP_FILE_NAME="${OLD_VERSION}.dump"
DUMP_FILE="/tmp/${DUMP_FILE_NAME}"

logger_info "Dumping contents of PostgreSQL $OLD_VERSION to ${POSTGRES_TMP_DIR}/${DUMP_FILE_NAME}."
dump_old_version
logger_info "Successfully dumped data from PostgreSQL $OLD_VERSION."

# wait for things to settle
sleep 5
logger_info "Starting $NEW_VERSION of PostgreSQL to begin data restore."
restore_dump
logger_info "PostgreSQL upgrade completed."
 # shutdown the new version.

graceful_exit
