#!/bin/bash
# ---------------------------------------------------------------------------
# upgrade-to-alpha6 -
#
# Copyright (c) 2000-2022, Board of Trustees of Leland Stanford Jr. University
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Usage: upgrade-to-alpha6 [-h|--help]
#
# Revision history:
# 2022-09-22 version 1
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="1.0"

UPGRADE_FROM="2\.0(?:\.(\d))?-alpha6.?"
UPGRADE_TO="2.0.60-alpha6"

## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/../_util"

COMPOSE_DIR="$(cd "${_D0}/../.." >/dev/null 2>&1 && pwd)"
CONFIG_DIR="${COMPOSE_DIR}/config"
SCRIPTS_DIR="${COMPOSE_DIR}/scripts"
LIB_DIR="${SCRIPTS_DIR}/lib"
UPDATES_DIR="${SCRIPTS_DIR}/upgrades"
DOCKER_CONFIGS_DIR="${CONFIG_DIR}/configs"
TEMPLATES_DIR="${CONFIG_DIR}/templates"
USEROPTS_DIR="${CONFIG_DIR}/useropts"

##
## Definitions
##
declare -a arr svcs
declare -a arr lockss_owned
STACK_PREFIX="lockss-stack"
SYSTEM_CONF_FILE="${CONFIG_DIR}/system.cfg"
set -a
. "${SYSTEM_CONF_FILE}"
set +a

clean_up() { # Perform pre-exit housekeeping
	return
}

error_exit() {
	echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
	clean_up
	exit 1
}

graceful_exit() {
	clean_up
	exit
}

signal_exit() { # Handle trapped signals
	case $1 in
		INT)
			error_exit "Program interrupted by user" ;;
		TERM)
			echo -e "\n$PROGNAME: Program terminated" >&2
			graceful_exit ;;
		*)
			error_exit "$PROGNAME: Terminating on unknown signal" ;;
	esac
}

usage() {
	echo -e "Usage: $PROGNAME [-h|--help]"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  Update alpha6 from a previous alpha release.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.

_EOF_
  return
}

remove_journal_files() {
  IFS=';' read -r -a repoPaths <<< "${LOCKSS_REPO_HOST_DIRS}"
  for dir in "${repoPaths[@]}"; do
    if [ ! -z "${dir}" ]; then
      logger_debug "Removing journal files under ${dir}/${STACK_PREFIX}-repo-content"
      find "${dir}/${STACK_PREFIX}-repo-content" -type f -name "lockss-repo.warc" -delete 2> /dev/null
    fi
  done
}

rename_tempwarcs_dir() {
  IFS=';' read -r -a repoPaths <<< "${LOCKSS_REPO_HOST_DIRS}"
  for dir in "${repoPaths[@]}"; do
    TEMPWARCS_DIR="${dir}/${STACK_PREFIX}-repo-content/tempwarcs"
    TMP_DIR="${dir}/${STACK_PREFIX}-repo-content/tmp"
    if [ -d "${TEMPWARCS_DIR}" ]; then
      logger_debug "Renaming directory (src: ${TEMPWARCS_DIR}, dst: ${TMP_DIR})"
      mkdir -p "${TMP_DIR}"
      mv "${TEMPWARCS_DIR}" "${TMP_DIR}/warcs"
    fi
  done
}

rename_collections_dir() {
  IFS=';' read -r -a repoPaths <<< "${LOCKSS_REPO_HOST_DIRS}"
  for dir in "${repoPaths[@]}"; do
    COLLECTIONS_DIR="${dir}/${STACK_PREFIX}-repo-content/collections"
    NAMESPACES_DIR="${dir}/${STACK_PREFIX}-repo-content/ns"
    if [ -d "${COLLECTIONS_DIR}" ]; then
      logger_debug "Renaming directory (src: ${COLLECTIONS_DIR}, dst: ${NAMESPACES_DIR})"
      mv "${COLLECTIONS_DIR}" "${NAMESPACES_DIR}"
    fi
  done
}

reset_index_state() {
  IFS=';' read -r -a repoPaths <<< "${LOCKSS_REPO_HOST_DIRS}"
  for dir in "${repoPaths[@]}"; do
    INDEX_STATE_DIR="${dir}/${STACK_PREFIX}-repo-data/state/index"
    if [ -d "${INDEX_STATE_DIR}" ]; then
      logger_debug "Removing index state from ${INDEX_STATE_DIR}"
      rm -f "${INDEX_STATE_DIR}"/reindex*
      rm -f "${INDEX_STATE_DIR}"/solr/*
    fi
  done
}

reset_solr_index() {
  local STACK_SOLR_DATA="${STACK_PREFIX}-solr-data"
  local SOLR_HOME_PATH="${LOCKSS_DATA_DIR}/${STACK_SOLR_DATA}"

  if [ -d "${SOLR_HOME_PATH}" ]; then
    local SOLR_BACKUP_TGZ="${LOCKSS_DATA_DIR}/${STACK_SOLR_DATA}.`date +%Y%m%d%H%M`.tar.gz"
    logger_info "Backing up Solr home directory to ${SOLR_BACKUP_TGZ}; this may take several minutes..."
    tar -C "${LOCKSS_DATA_DIR}" -czf "${SOLR_BACKUP_TGZ}" "${STACK_SOLR_DATA}"
    if [ $? -eq 0 ]; then
      logger_debug "Removing Solr home directory ($SOLR_HOME_PATH})"
      rm -rf "${SOLR_HOME_PATH}"
    else
      err_exit "Failed to backup Solr home directory; exiting."
    fi
  fi
}

###
## MAIN
###
# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT
# Source system config file

if [ ! -r "$SYSTEM_CONF_FILE" ]; then
  err "$_0: The system configuration file does not exist.  This script requires the ./config/system.cfg file."
  err_exit "$_0: Run scripts/configure-lockss first."
fi

# Parse command-line
while [[ $# -gt 0 ]]; do
  case $1 in
    -h | --help)
      help_message; graceful_exit ;;
    -* | --*)
      usage
      error_exit "Unknown option $1" ;;
    *)
      shift
      ;;
  esac
done

# Sanity checks
Check_Runnable
Check_Stopped
Check_Configured

logger_init

read_config ${SYSTEM_CONF_FILE}
logger_debug "Loaded LOCKSS system configuration"

VERSION_FILE="${LOCKSS_DATA_DIR}/VERSION"

if [ ! -f "${VERSION_FILE}" ]; then
  error_exit "VERSION file not found in LOCKSS data directory; upgrade not necessary"
fi

CUR_VERSION="`cat ${VERSION_FILE}`"

if Parse_Lockss_Version "${CUR_VERSION}"; then
  case "${MATCH_MAJOR}.${MATCH_MINOR}-${MATCH_SUFFIX}" in
    2.0-alpha5)
      logger_info "Performing upgrade from alpha5"

      # Repository Service changes
      rename_collections_dir
      rename_tempwarcs_dir
      remove_journal_files

      # Reset Solr for reindex
      reset_solr_index
      reset_index_state
      signal_reindex "${STACK_PREFIX}"

      ;;
    2.0-alpha6)
      logger_info "Upgrade already applied (alpha6)"
      ;;
    *)
      error_exit "Do not know how to upgrade from ${CUR_VERSION}"
      ;;
  esac
else
  error_exit "Unexpected version: ${CUR_VERSION}"
fi

logger_debug "Updating LOCKSS version file"
Set_Lockss_Version "${UPGRADE_TO}"

logger_info "Upgrade completed"
graceful_exit
