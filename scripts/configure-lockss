#!/usr/bin/env bash
#---------------------------------------------------------------------------
# configure-lockss - Collect host system information needed to run LOCKSS stack(s).

# Copyright (c) 2000-2023, Board of Trustees of Leland Stanford Jr. University
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Usage: configure-lockss [-h|--help] [-s|--stacks]
#
# Revision history:
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="1.0"

if [ -n "${BYPASS_ALL_CHECKS}" ]; then
  BYPASS_CHECK_USER=1
  BYPASS_KUBE_COMMANDS=1
  BYPASS_MAIL=1
fi

##
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/_util"

##
## Definitions
##

# Files
SYSTEM_CONF_FILE="${CONFIG_DIR}/system.cfg"
K8S_CONF_FILE="${CONFIG_DIR}/k8s.cfg"

# $1=log filename
# tee stdout/err to log file
Log_Std() {
  local file="$1"
  # Create named pipe, delete on exit
  local npipe=/tmp/$$.ptmp1
  trap "rm -f $npipe" EXIT
  # This script always runs as process 1, don't rely on unique name
  rm -f $npipe
  mknod $npipe p
  tee -a "${file}" <$npipe &
  # Redirect FD 1&2 to pipe
  exec 1>$npipe
  exec 2>&1
}


configure_databases() {
  echo ""
  echo "Configuring database services..."
  echo ""
  #check postgres service
  if [ "X${USE_LOCKSS_POSTGRES}" = X ]; then
    USE_LOCKSS_POSTGRES=true
  fi
  echo "You may use either the embedded PostgreSQL service or an external one"
  echo "provided by you or your institution, in which case you will be asked for"
  echo "its hostname and other pertinent information."
  ask_for_input "Use embedded LOCKSS PostgreSQL DB Service?" $(to_yes_no ${USE_LOCKSS_POSTGRES})
  if is_yes "${ANS}"; then
    USE_LOCKSS_POSTGRES=true
    LOCKSS_POSTGRES_HOST='lockss-postgres-service'
    LOCKSS_POSTGRES_PORT=5432
    LOCKSS_POSTGRES_USER="LOCKSS"
    LOCKSS_POSTGRES_SCHEMA=${LOCKSS_POSTGRES_USER}
    LOCKSS_DBNAME_PREFIX="Lockss"
  else
    USE_LOCKSS_POSTGRES=false

    if [ "X${LOCKSS_POSTGRES_HOST}" = X ]; then
      LOCKSS_POSTGRES_HOST=${LOCKSS_HOSTNAME}
    fi
    ask_for_input "Fully qualified hostname (FQDN) of PostgreSQL host" "${LOCKSS_POSTGRES_HOST}"
    LOCKSS_POSTGRES_HOST=${ANS}

    if [ "X${LOCKSS_POSTGRES_PORT}" = X ]; then
      LOCKSS_POSTGRES_PORT=5432
    fi
    ask_for_input "Port used by PostgreSQL host" "${LOCKSS_POSTGRES_PORT}"
    LOCKSS_POSTGRES_PORT=${ANS}

    if [ "X${LOCKSS_POSTGRES_SCHEMA}" = X ]; then
      LOCKSS_POSTGRES_SCHEMA="LOCKSS"
    fi
    ask_for_input "Schema for PostgreSQL service" "${LOCKSS_POSTGRES_SCHEMA}"
    LOCKSS_POSTGRES_SCHEMA=${ANS}

    if [ "X${LOCKSS_DBNAME_PREFIX}" = X ]; then
      LOCKSS_DBNAME_PREFIX="Lockss"
    fi
    ask_for_input "Database name prefix for PostgreSQL service" "${LOCKSS_DBNAME_PREFIX}"
    LOCKSS_DBNAME_PREFIX=${ANS}

    if [ "X${LOCKSS_POSTGRES_USER}" = X ]; then
      LOCKSS_POSTGRES_USER="LOCKSS"
    fi
    ask_for_input "Login name for PostgreSQL service" "${LOCKSS_POSTGRES_USER}"
    LOCKSS_POSTGRES_USER=${ANS}

  fi

  ask_for_password "Password for PostgreSQL database" "${LOCKSS_DB_PASSWD}" "" "lockss-postgres-pass"
  LOCKSS_DB_PASSWD="${PASSWD_HASH}"
  if [ -n "${PASSWD_CLEAR}" ]; then
      Add_Secret lockss-postgres-pass "${PASSWD_CLEAR}"
  fi

  #check Solr service
  if [ "X${USE_LOCKSS_SOLR}" = X ]; then
    USE_LOCKSS_SOLR=true
  fi
  echo "You may use either the embedded Solr service or an external one"
  echo "provided by you or your institution, in which case you will be asked for"
  echo "its hostname and other pertinent information."
  ask_for_input "Use embedded LOCKSS Solr Service?" $(to_yes_no ${USE_LOCKSS_SOLR})
  if is_yes "${ANS}"; then
    USE_LOCKSS_SOLR=true
    LOCKSS_SOLR_HOST='lockss-solr-service'
    LOCKSS_SOLR_PORT='8983'
    LOCKSS_SOLR_CORE_REPO="lockss-repo"
  else
    USE_LOCKSS_SOLR=false
    if [ "X${LOCKSS_SOLR_HOST}" = X ]; then
      LOCKSS_SOLR_HOST=${LOCKSS_HOSTNAME}
    fi
    ask_for_input "Fully qualified hostname (FQDN) of Solr host" "${LOCKSS_SOLR_HOST}"
    LOCKSS_SOLR_HOST=${ANS}

    if [ "X${LOCKSS_SOLR_PORT}" = X ]; then
      LOCKSS_SOLR_PORT='8983'
    fi
    ask_for_input "Port used by Solr host" "${LOCKSS_SOLR_PORT}"
    LOCKSS_SOLR_PORT=${ANS}

    if [ "X${LOCKSS_SOLR_CORE_REPO}" = X ]; then
      LOCKSS_SOLR_CORE_REPO='lockss-repo'
    fi
    ask_for_input "Solr core repo name" "${LOCKSS_SOLR_CORE_REPO}"
    LOCKSS_SOLR_CORE_REPO=${ANS}
  fi
  # Account for solr user
  if [ "X${LOCKSS_SOLR_USER}" = X ]; then
      LOCKSS_SOLR_USER=${LOCKSS_ADMIN_USER}
  fi
  ask_for_input "User name for LOCKSS Solr access" "${LOCKSS_SOLR_USER}"
  LOCKSS_SOLR_USER=${ANS}

  ask_for_password "Password for LOCKSS Solr access" "${LOCKSS_SOLR_PASSWD}" "" "lockss-solr-pass"
  LOCKSS_SOLR_PASSWD="${PASSWD_HASH}"
  if [ -n "${PASSWD_CLEAR}" ]; then
    LOCKSS_SOLR_PASSWD_HASH=$(${SCRIPTS_DIR}/solrpass.sh ${PASSWD_CLEAR})
    Add_Secret solr-auth "${LOCKSS_SOLR_USER}:${PASSWD_CLEAR}"
    Add_Secret lockss-solr-pass "${PASSWD_CLEAR}"
  fi
}


configure_services() {
  echo ""
  echo "Configuring LOCKSS services..."
  echo ""
  USE_LOCKSS_CFG=true

  #check metadata service
  if [ "X${USE_LOCKSS_MDQ}" = X ]; then
    USE_LOCKSS_MDQ=true
  fi
  ask_for_input "Use LOCKSS Metadata Query Service?" $(to_yes_no ${USE_LOCKSS_MDQ})
  if is_yes "${ANS}"; then
    USE_LOCKSS_MDQ=true
  else
    USE_LOCKSS_MDQ=false
  fi
  #check metadata extraction service
  if [ "X${USE_LOCKSS_MDX}" = X ]; then
    USE_LOCKSS_MDX=true
  fi
  ask_for_input "Use LOCKSS Metadata Extraction Service?" $(to_yes_no ${USE_LOCKSS_MDX})
  if is_yes "${ANS}"; then
    USE_LOCKSS_MDX=true
  else
    USE_LOCKSS_MDX=false
  fi

  # Check SOAP service
  if [ "X${USE_LOCKSS_SOAP}" = X ]; then
    USE_LOCKSS_SOAP=false
  fi
  ask_for_input "Use LOCKSS SOAP Service?" $(to_yes_no ${USE_LOCKSS_SOAP})
  if is_yes "${ANS}"; then
    USE_LOCKSS_SOAP=true
  else
    USE_LOCKSS_SOAP=false
  fi

  #check repository service
  USE_LOCKSS_REPO=true

  #check HDFS service
  #    if [ "X${USE_LOCKSS_HDFS}" = X ]; then
  USE_LOCKSS_HDFS=false
  #    fi
  #    ask_for_input "Use LOCKSS HDFS Service?" $(to_yes_no ${USE_LOCKSS_HDFS})
  #    if is_yes "${ANS}"; then
  #        USE_LOCKSS_HDFS=true
  #    else
  #        USE_LOCKSS_HDFS=false
  #    fi
  echo "You can use Pywb and/or Openwayback for content replay..."
  ask_for_input "Use LOCKSS Pywb Service?" $(to_yes_no ${USE_LOCKSS_PYWB})
  if is_yes "${ANS}"; then
    USE_LOCKSS_PYWB=true
  else
    USE_LOCKSS_PYWB=false
  fi
  ask_for_input "Use LOCKSS OpenWayback Service?" $(to_yes_no ${USE_LOCKSS_OPENWB})
  if is_yes "${ANS}"; then
    echo "Using LOCKSS OpenWayback Service requires the LOCKSS Repository Service to permit insecure read request."
    ask_for_input "Okay to turn off authentication for read-only requests for LOCKSS Repository Service?" $(to_yes_no ${USE_LOCKSS_OPENWB})
    if is_yes "${ANS}"; then
      USE_LOCKSS_OPENWB=true
    else
      echo "Not enabling OpenWayback Service."
      USE_LOCKSS_OPENWB=false
    fi
  else
    USE_LOCKSS_OPENWB=false
  fi
}

# find os release name
os_release_name() {
  if [ -f /etc/os-release ]; then
    OS_NAME=$(grep '^PRETTY_NAME=' /etc/os-release)
    OS_NAME=$(echo "${OS_NAME}" | sed -e 's/.*=//')
    if [ -z "${OS_NAME}" ]; then
      OS_NAME=$(grep '^NAME=' /etc/os-release)
      OS_NAME=$(echo "${OS_NAME}" | sed -e 's/.*=//')
      OS_VER=$(grep '^VERSION=' /etc/os-release)
      OS_VER=$(echo "${OS_VER}" | sed -e 's/.*=//')
      if [ -n "${OS_NAME}" -o -n "${OS_VER}" ]; then
        OS_NAME="${OS_NAME} ${OS_VER}"
      fi
    fi
    OS_NAME=$(echo "${OS_NAME}" | sed -e 's/"//g')
    echo "${OS_NAME}"
  fi
}

# write_config_file file
write_config_file() {
  cat >"${1}" <<EOF
LOCKSS_CONFIG_VERSION="${LOCKSS_CONFIG_VERSION}"
LOCKSS_USER="${LOCKSS_USER:-lockss}"
LOCKSS_HOSTNAME="${LOCKSS_HOSTNAME}"
LOCKSS_IPADDR="${LOCKSS_IPADDR}"
LOCKSS_EXTERNAL_IPADDR="${LOCKSS_EXTERNAL_IPADDR}"
LOCKSS_V3_PORT="${LOCKSS_V3_PORT}"
LOCKSS_ACCESS_SUBNET="${LOCKSS_ACCESS_SUBNET}"
LOCKSS_MAILHUB="${LOCKSS_MAILHUB}"
LOCKSS_MAILHUB_USER="${LOCKSS_MAILHUB_USER}"
LOCKSS_MAILHUB_PASSWORD="${LOCKSS_MAILHUB_PASSWORD}"
LOCKSS_EMAIL="${LOCKSS_EMAIL}"
LOCKSS_PROPS_URL="${LOCKSS_PROPS_URL}"
LOCKSS_PROPS_PROXY="${LOCKSS_PROPS_PROXY}"
LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE="${LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE}"
LOCKSS_PRESERVATION_GROUP="${LOCKSS_PRESERVATION_GROUP}"
LOCKSS_DATA_DIR="${LOCKSS_DATA_DIR}"
LOCKSS_REPO_HOST_DIRS="${LOCKSS_REPO_HOST_DIRS}"
LOCKSS_REPO_CONTAINER_DIRS="${LOCKSS_REPO_CONTAINER_DIRS}"
LOCKSS_LOGS_DIR="${LOCKSS_LOGS_DIR}"
LOCKSS_ADMIN_USER="${LOCKSS_ADMIN_USER}"
LOCKSS_ADMIN_PASSWD="${LOCKSS_ADMIN_PASSWD}"
LOCKSS_DB_PASSWD="${LOCKSS_DB_PASSWD}"
LOCKSS_TMPDIR="${LOCKSS_TMPDIR}"
LOCKSS_SCRIPT_LOG_DIR="${LOCKSS_SCRIPT_LOG_DIR}"
LOCKSS_POSTGRES_HOST="${LOCKSS_POSTGRES_HOST}"
LOCKSS_POSTGRES_PORT="${LOCKSS_POSTGRES_PORT}"
LOCKSS_POSTGRES_USER="${LOCKSS_POSTGRES_USER}"
LOCKSS_POSTGRES_SCHEMA="${LOCKSS_POSTGRES_SCHEMA}"
LOCKSS_DBNAME_PREFIX="${LOCKSS_DBNAME_PREFIX}"
LOCKSS_SOLR_HOST="${LOCKSS_SOLR_HOST}"
LOCKSS_SOLR_PORT=${LOCKSS_SOLR_PORT}
LOCKSS_SOLR_CORE_REPO="${LOCKSS_SOLR_CORE_REPO}"
LOCKSS_SOLR_USER="${LOCKSS_SOLR_USER}"
LOCKSS_SOLR_PASSWD="${LOCKSS_SOLR_PASSWD}"
LOCKSS_SOLR_PASSWD_HASH="${LOCKSS_SOLR_PASSWD_HASH}"
LOCKSS_CLEAR_TMPDIR="${LOCKSS_CLEAR_TMPDIR:-yes}"
LOCKSS_TIMEZONE="${LOCKSS_TIMEZONE}"
LOCKSS_CONTAINER_SUBNETS="${LOCKSS_CONTAINER_SUBNETS}"
PREV_CNI0_SUBNET="${CNI0_SUBNET}"
KUBECTL_CMD="${KUBECTL_CMD}"
USE_LOCKSS_CFG="${USE_LOCKSS_CFG:-true}"
USE_LOCKSS_MDQ="${USE_LOCKSS_MDQ:-true}"
USE_LOCKSS_MDX="${USE_LOCKSS_MDX:-true}"
USE_LOCKSS_POL="${USE_LOCKSS_POL:-true}"
USE_LOCKSS_SOAP="${USE_LOCKSS_SOAP:-false}"
USE_LOCKSS_REPO="${USE_LOCKSS_REPO:-true}"
USE_LOCKSS_POSTGRES="${USE_LOCKSS_POSTGRES:-true}"
USE_LOCKSS_SOLR="${USE_LOCKSS_SOLR:-true}"
USE_LOCKSS_HDFS="${USE_LOCKSS_HDFS:-false}"
USE_LOCKSS_PYWB="${USE_LOCKSS_PYWB:-true}"
USE_LOCKSS_OPENWB="${USE_LOCKSS_OPENWB:-false}"
EOF
  OS_NAME="$(os_release_name)"
  if [ -n "${OS_NAME}" ]; then
    echo "OS_NAME=\"${OS_NAME}\"" >>"${1}"
  fi
}

write_k8s_cfg() {
  cat >"${1}" <<EOF
K8S_FLAVOR="${K8S_FLAVOR}"
K8S_VERSION="${K8S_VERSION}"
KUBECTL_CMD="${KUBECTL_CMD}"
EOF
  if [ -n "${K3S_VERSION}" ]; then
    echo "K3S_VERSION=\"${K3S_VERSION}\"" >>"${1}"
  fi
  if [ -n "${RESOLV_CONF_CONFIG}" ]; then
    echo "RESOLV_CONF_CONFIG=\"${RESOLV_CONF_CONFIG}\"" >>"${1}"
  fi
}

# build_config_file file user
build_config_file() {
  echo "Building config file ${1} for user ${2}..."
  Clear_Secrets
  CONFIG_OK=N
  until is_yes ${CONFIG_OK}; do
    if [ "X${LOCKSS_HOSTNAME}" = X ]; then
      LOCKSS_HOSTNAME=${LOCAL_HOSTNAME}
    fi
    HOSTNAME_OK=N
    until is_yes ${HOSTNAME_OK}; do
      ask_for_input "Fully qualified hostname (FQDN) of this machine" "${LOCKSS_HOSTNAME}"
      if valid_hostname "${ANS}"; then
        LOCKSS_HOSTNAME="${ANS}"
        HOSTNAME_OK=Y
      else
        echo "Illegal hostname: ${ANS}"
      fi
    done

    LOCKSS_HOSTNAME=${ANS}
    if [ "X${LOCKSS_IPADDR}" = X ]; then
      LOCKSS_IPADDR=${LOCAL_IPADDR}
    fi
    IP_OK=N
    until is_yes ${IP_OK}; do
      ask_for_input "IP address of this machine" ${LOCKSS_IPADDR}
      if valid_ip4_address "${ANS}"; then
        LOCKSS_IPADDR="${ANS}"
        IP_OK=Y
      else
        echo "Illegal IPv4 address: ${ANS}"
      fi
    done
    NAT=N
    if [ "${LOCKSS_EXTERNAL_IPADDR}X" != X ]; then
      NAT=Y
    fi
    ask_for_input "Is this machine behind NAT?" ${NAT}
    if is_yes "${ANS}"; then
      EXT_OK=N
      until is_yes ${EXT_OK}; do
        ask_for_input "External IP address for NAT" ${LOCKSS_EXTERNAL_IPADDR}
        if valid_ip4_address ${ANS}; then
          LOCKSS_EXTERNAL_IPADDR=${ANS}
          EXT_OK=Y
        fi
      done
    else
      unset LOCKSS_EXTERNAL_IPADDR
    fi
    if [ "X${LOCKSS_ACCESS_SUBNET}" = "X" ]; then
      LOCKSS_ACCESS_SUBNET=$(echo ${LOCKSS_IPADDR} | sed 's/\.[0-9][0-9]*$/.0\/24/')
    fi
    SUBNET_OK=N
    until is_yes ${SUBNET_OK}; do
      ask_for_input "Initial subnet(s) for admin UI access" ${LOCKSS_ACCESS_SUBNET}
      if valid_subnet_list "${ANS}"; then
        LOCKSS_ACCESS_SUBNET="${ANS}"
        SUBNET_OK=Y
      fi
    done

    CNI0_ADDR=$(ip -4 -o addr show dev cni0 | awk '{split($4,a,"/");print a[1]}')
    CNI0_SUBNET=$(echo ${CNI0_ADDR} | sed 's/\.[0-9][0-9]*$/.0\/24/')
    if [ -z "${LOCKSS_CONTAINER_SUBNETS}" ]; then
      LOCKSS_CONTAINER_SUBNETS="${CNI0_SUBNET}"
    elif [ -n "${CNI0_SUBNET}" -a "${LOCKSS_CONTAINER_SUBNETS}" != "${CNI0_SUBNET}" ]; then
      # The current value isn't what we would choose
      if [ -n "${PREV_CNI0_SUBNET}" -a "${LOCKSS_CONTAINER_SUBNETS}" = "${PREV_CNI0_SUBNET}" ]; then
        # It matches the previous CNI0 subnet, use new one by default
        echo "Container subnet has changed from ${PREV_CNI0_SUBNET} to ${CNI0_SUBNET}"
        LOCKSS_CONTAINER_SUBNETS="${CNI0_SUBNET}"
      elif [ -z "${PREV_CNI0_SUBNET}" ]; then
        # No record of previous CNI0_SUBNET, can't tell whether it
        # changed or user previously entered a different subnet
        echo "Container subnet was ${LOCKSS_CONTAINER_SUBNETS}, we think it should now be ${CNI0_SUBNET}"
        ask_for_input "Do you want to change it?" Y
        if is_yes "${ANS}"; then
          LOCKSS_CONTAINER_SUBNETS="${CNI0_SUBNET}"
        fi
      fi
    fi
    SUBNET_OK=N
    until is_yes ${SUBNET_OK}; do
      ask_for_input "Container subnet for inter-service access control" ${LOCKSS_CONTAINER_SUBNETS}
      if valid_subnet "${ANS}"; then
        LOCKSS_CONTAINER_SUBNETS="${ANS}"
        SUBNET_OK=Y
      fi
    done
    if [ "X${LOCKSS_V3_PORT}" = X ]; then
      LOCKSS_V3_PORT=9729
    fi
    ask_for_input "LCAP V3 protocol port" ${LOCKSS_V3_PORT}
    if [ "X${ANS}" != "X" ]; then
      LOCKSS_V3_PORT="${ANS}"
    fi
    if [ "X${LOCKSS_UI_PORT}" = X ]; then
      LOCKSS_UI_PORT=24600
    fi
    if [ "X${LOCKSS_MAILHUB}" = X ]; then
      LOCKSS_MAILHUB=localhost
    fi
    ask_for_input "Mail relay for this machine" ${LOCKSS_MAILHUB}
    LOCKSS_MAILHUB="${ANS}"
    NEED_USER=N
    if [ "X${LOCKSS_MAILHUB_USER}" != X ]; then
      NEED_USER=Y
    fi
    ask_for_input "Does the mail relay ${LOCKSS_MAILHUB} need a username and password?" ${NEED_USER}
    if is_yes "${ANS}"; then
      ask_for_input "User for ${LOCKSS_MAILHUB}" ${LOCKSS_MAILHUB_USER}
      LOCKSS_MAILHUB_USER="${ANS}"
      ask_for_password "Password for ${LOCKSS_MAILHUB_USER}@${LOCKSS_MAILHUB}" "" "${LOCKSS_MAILHUB_PASSWORD}" ""
      LOCKSS_MAILHUB_PASSWORD="${PASSWD_CLEAR}"
    else
      LOCKSS_MAILHUB_USER=
      LOCKSS_MAILHUB_PASSWORD=
    fi
    EMAIL_OK=N
    until is_yes ${EMAIL_OK}; do
      ask_for_input "E-mail address for administrator" ${LOCKSS_EMAIL}
      if [ "X${ANS}" != X ]; then
        LOCKSS_EMAIL="${ANS}"
        EMAIL_OK=Y
      fi
    done
    if [ "X${LOCKSS_PROPS_URL}" = X ]; then
      LOCKSS_PROPS_URL="http://props.lockss.org:8001/demo/lockss.xml"
    fi
    ask_for_input "Configuration URL" ${LOCKSS_PROPS_URL}
    LOCKSS_PROPS_URL="${ANS}"

    if echo ${LOCKSS_PROPS_URL} | egrep -is "^https:" >/dev/null; then
      if [ "X${LOCKSS_PROPS_AUTHENTICATE_SERVER}" = X ]; then
        LOCKSS_PROPS_AUTHENTICATE_SERVER="Y"
      fi
      ask_for_input "Verify configuration server authenticity?" ${LOCKSS_PROPS_AUTHENTICATE_SERVER}
      if is_yes "${ANS}"; then
        if [ "X${LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE}" = X ]; then
          LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE="lockss-ca"
        fi
        ask_for_input "Server certificate keystore" ${LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE}
        LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE="${ANS}"
      else
        unset LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE
      fi
    fi

    if [ "X${LOCKSS_PROPS_PROXY}" = X ]; then
      LOCKSS_PROPS_PROXY="NONE"
    fi
    ask_for_input "Configuration proxy (host:port)" ${LOCKSS_PROPS_PROXY}
    LOCKSS_PROPS_PROXY="${ANS}"

    if [ "X${LOCKSS_PRESERVATION_GROUP}" = X ]; then
      LOCKSS_PRESERVATION_GROUP="demo"
    fi
    ask_for_input "Preservation group(s)" "${LOCKSS_PRESERVATION_GROUP}"
    LOCKSS_PRESERVATION_GROUP="${ANS}"
    DATA_PATHS_OK=N
    until is_yes ${DATA_PATHS_OK}; do
      ask_for_input "Root path for primary content data storage" ${LOCKSS_DATA_DIR}
      if [ "X${ANS}" != X ]; then
        LOCKSS_DATA_DIR="$(normalize_path ${ANS})"
        DATA_PATHS_OK=Y
      fi
    done
    USE_MULTIPLE_CACHES=false
    if [ "X${LOCKSS_REPO_HOST_DIRS}" != X ]; then
     IFS=';' read -r -a prevPaths <<< "${LOCKSS_REPO_HOST_DIRS}"
     if test ${#prevPaths[*]} -gt 1; then
      USE_MULTIPLE_CACHES=true
     fi
    fi
    prevPaths[0]=${LOCKSS_DATA_DIR}
    curPaths[0]=${LOCKSS_DATA_DIR}
    repoDirs[0]="/content0"
    ask_for_input "Use additional directories for content data storage?" $(to_yes_no ${USE_MULTIPLE_CACHES})
    if is_yes "${ANS}"; then
      count=1
      until is_yes "${done}"; do
        ask_for_input "Root path for additional content data storage $count (q to quit)" ${prevPaths[count]}
        if [ "X${ANS}" = Xq ]; then
          done=Y
        elif [ -n "${ANS}" ]; then
          curPaths[count]="$(normalize_path ${ANS})"
          repoDirs[count]="/content$count"
          count=$((count+1))
        fi
      done
      new_repo_vols=$( IFS=';' ; echo "${curPaths[*]}" )
      [ "$new_repo_vols" = "${LOCKSS_REPO_HOST_DIRS}" ] || echo "If you have removed any data storage directories you must run repo cache updater."
      LOCKSS_REPO_CONTAINER_DIRS=$( IFS=';' ; echo "${repoDirs[*]}" )
      LOCKSS_REPO_HOST_DIRS=${new_repo_vols}
    else
      if test ${#prevPaths[*]} -gt 1; then
        echo "Run repo cache updater."
      fi
      LOCKSS_REPO_CONTAINER_DIRS="/content0"
      LOCKSS_REPO_HOST_DIRS="${LOCKSS_DATA_DIR}"
    fi
    LOG_PATHS_OK=N
    if [ -n "${LOCKSS_LOGS_DIR}" ]; then
      log_dir_default="${LOCKSS_LOGS_DIR}"
    else
      log_dir_default="${LOCKSS_DATA_DIR}"
    fi
    until is_yes ${LOG_PATHS_OK}; do
      ask_for_input "Root path for log data storage" ${log_dir_default}
      if [ "X${ANS}" != X ]; then
        LOCKSS_LOGS_DIR="$(normalize_path ${ANS})"
        LOG_PATHS_OK=Y
      fi
    done
    if [ "X${LOCKSS_TMPDIR}" = X ]; then
      LOCKSS_TMPDIR=${LOCKSS_DATA_DIR}
    fi
    ask_for_input "Root path for temporary data storage (local storage preferred)" ${LOCKSS_TMPDIR}
    LOCKSS_TMPDIR="$(normalize_path ${ANS})"
    if [ "X${LOCKSS_SCRIPT_LOG_DIR}" = X ]; then
      LOCKSS_SCRIPT_LOG_DIR="${LOCKSS_DATA_DIR}/lockss-script-logs"
    fi
#     ask_for_input "Directory for storing install script logs" ${LOCKSS_SCRIPT_LOG_DIR}
#     LOCKSS_SCRIPT_LOG_DIR="$(normalize_path ${ANS})"
    USER_OK=N
    until is_yes ${USER_OK}; do
      ask_for_input "User name for web UI administration" "${LOCKSS_ADMIN_USER}"
      if [ "X${ANS}" != X ]; then
        LOCKSS_ADMIN_USER="${ANS}"
        USER_OK=Y
      fi
    done
    ask_for_password "Password for web UI administration user ${LOCKSS_ADMIN_USER}" "${LOCKSS_ADMIN_PASSWD}" "" "lockss-ui-pass lockss-auth"
    LOCKSS_ADMIN_PASSWD="${PASSWD_HASH}"
    if [ -n "${PASSWD_CLEAR}" ]; then
      Add_Secret lockss-ui-pass "${PASSWD_CLEAR}"
      Add_Secret lockss-auth "${LOCKSS_ADMIN_USER}:${PASSWD_CLEAR}"
    fi
    # Configure databases
    configure_databases
    # Configure the individual services
    configure_services
    TMP_CONFIG=${CONFIG_DIR}/config.tmp
    export LOCKSS_CONFIG_VERSION=2
    export LOCKSS_USER
    write_config_file ${TMP_CONFIG} ${LOCKSS_USER}
    echo
    echo "Configuration:"
    cat ${TMP_CONFIG}

    ask_for_input "OK to store this configuration?" Y
    if is_yes "${ANS}"; then
      if ! cp ${TMP_CONFIG} ${1}; then
        echo "Config not installed, left in ${TMP_CONFIG}"
        exit 1
      fi
      rm -f ${TMP_CONFIG}
      Store_All_Secrets
      echo "Configuration stored"

      local STORAGE_ERRORS=
      setup_storage_dirs ${SYSTEM_CONF_FILE} ${CONFIG_USER} || STORAGE_ERRORS=1

      CONFIG_OK=Y

      FILT_CONFIG=$(mktemp /tmp/filtconfig.XXXXXX)
      egrep -sv 'PASSW(OR)?D.*=' <${1} >>${FILT_CONFIG}
      mail_sent=""
      if [ $(command -v mail) >/dev/null ]; then
          if [ -z "${BYPASS_MAIL}" ]; then
              if mail -s "Config for ${2}@${LOCKSS_HOSTNAME}" ${LOCKSS_EMAIL} ${LOCKSS_TEAM} <${FILT_CONFIG}; then
                  mail_sent=1
              else
                echo "The attempt to mail configuration failed.  Please check your mail configuration."
              fi
          fi
      else
        echo "The 'mail' command isn't installed (or isn't on the PATH)."
      fi
      if [ -z "${mail_sent}" ]; then
        UNSENT_FILE=/tmp/unsent-lockss-config
        cp ${FILT_CONFIG} ${UNSENT_FILE}
        echo "Please send ${UNSENT_FILE} to ${LOCKSS_TEAM}."
      fi
      rm -f ${FILT_CONFIG}
    fi
  done
  if [ -n "${STORAGE_ERRORS}" ]; then
      echo
      echo "Storage directories have not been set up correctly.  Please either"
      echo " fix the ownership/permission problems then run scripts/setup-storage, or"
      echo " rerun scripts/configure-lockss and specify different directories."
      return 1
  fi
}

setup_k8s_cmd() {
  Check_K8s_Command
  KUBCTL_OK=false
  until is_yes ${KUBCTL_OK}; do
    ask_for_input "Command to use to execute kubectl commands" "${KUBECTL_CMD}"
    local first_word=$(echo "${ANS}" | awk '{print $1}')
    if [ $(command -v ${first_word}) >/dev/null ]; then
      KUBECTL_CMD="${ANS}"
      KUBCTL_OK=Y
    fi
  done
  echo "Kubectl command alias set to $KUBECTL_CMD"
  KUBECTL="${KUBECTL_CMD}"
  K8S_VERSION=$($KUBECTL_CMD version --short=true | grep 'Server Version:' | awk '{print $3}')
  write_k8s_cfg ${K8S_CONF_FILE}|| err_exit "Attempt to write ${K8S_CONF_FILE} failed."
}

CONFIG_LOGFILE="./lockss-configure.log"

# Redirect stdout and stderr to file

Log_Std "${CONFIG_LOGFILE}"

###
# Start
###
CONFIG_USER=$(whoami)

if $(am_i_root); then
  err_exit "This script should not be run as root. Run as the lockss user."
fi

OS_TYPE=$(uname -s)
if [ -z "${LOCKSS_TEAM}" ]; then
  LOCKSS_TEAM=lockssdiag@lockss.org
fi
umask 002
LOCKSS_USER="lockss"
LOCAL_HOSTNAME=$(hostname -f 2>/dev/null) || LOCAL_HOSTNAME=$(uname -n 2>/dev/null)

echo "-------------------------------------------------------------"
echo "$(${SCRIPTS_DIR}/installer-version)"
echo "-------------------------------------------------------------"

case ${OS_TYPE} in
Linux)
  LOCKSS_HOME=
  SHA256SUM=sha256sum
  READLINK="readlink -f"
  ;;
Darwin)
  LOCKSS_HOME=
  SHA256SUM=sha256sum
  READLINK="readlink"
  ;;
*)
  echo "${OS_TYPE} not supported"
  exit 1
  ;;
esac

LOCKSS_TIMEZONE=$(Get_Timezone)

[ -z "${LOCKSS_TIMEZONE}" ] && echo "Warning, timezone not set"
LOCAL_IPADDR=$(guess_ip_address)

declare -i CONFIG_COUNT

echo "LOCKSS host configuration for ${OS_TYPE}."
echo "For more information see README"

if [ -r "${SYSTEM_CONF_FILE}" ]; then
  echo "Setting defaults from existing config: ${SYSTEM_CONF_FILE}"
  read_config ${SYSTEM_CONF_FILE}
fi
# support for alternate kubectl command
if [ -r "${K8S_CONF_FILE}" ]; then
  echo "Reading Kubernetes config: ${K8S_CONF_FILE}"
  read_config ${K8S_CONF_FILE}
fi
echo "Checking system state..."

# Sanity checks
if [ -z "${BYPASS_KUBE_COMMANDS}" ]; then
  setup_k8s_cmd
  Check_Runnable
else
  echo "Bypassing Check_Runnable and KUBECTL commands"
  kubectl_cmd() {
    echo "Bypassing kubectl, simulating success of" >&2
    echo "kubectl $*" >&2
    return 0
  }
fi

#get the number of stacks
case "${1}" in
'') CONFIG_COUNT=1 ;;
[1-9]) CONFIG_COUNT="${1}" ;;
  *) echo "Invalid number of parallel stacks: ${1}" ; exit 1 ;;
esac

#build config file
echo "Building config for ${CONFIG_COUNT} stacks on ${OS_TYPE} for user ${CONFIG_USER}..."
if build_config_file ${SYSTEM_CONF_FILE} ${CONFIG_USER} ${CONFIG_COUNT} ; then
    echo "Run scripts/start-lockss to launch the LOCKSS stack 'lockss-stack'..."
    exit 0
else
  echo
  echo "Some problems were encountered.  They must be fixed before launching the"
  echo " LOCKSS stack with scripts/start-lockss"
  exit 1
fi
