#!/usr/bin/env bash
#---------------------------------------------------------------------------
# configure-lockss - Collect host system information needed to run LOCKSS stack(s).

# Copyright (c) 2000-2023, Board of Trustees of Leland Stanford Jr. University
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Usage: configure-lockss [-r|--replay] [-h|--help]
#

PROGNAME=${0##*/}
VERSION="1.0"

if [ -n "${BYPASS_ALL_CHECKS}" ]; then
  BYPASS_CHECK_USER=1
  BYPASS_KUBE_COMMANDS=1
  BYPASS_MAIL=1
fi

##
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/_util"

##
## Definitions
##

# Files
SYSTEM_CONF_FILE="${CONFIG_DIR}/system.cfg"
K8S_CONF_FILE="${CONFIG_DIR}/k8s.cfg"

# $1=log filename
# tee stdout/err to log file
Log_Std() {
  local file="$1"
  # Create named pipe, delete on exit
  local npipe=/tmp/$$.ptmp1
  trap "rm -f $npipe" EXIT
  # This script always runs as process 1, don't rely on unique name
  rm -f $npipe
  mknod $npipe p
  tee -a "${file}" <$npipe &
  # Redirect FD 1&2 to pipe
  exec 1>$npipe
  exec 2>&1
}

configure_databases() {
  echo ""
  echo "Configuring database services..."
  echo ""
  #check postgres service
  echo "You may use either the embedded PostgreSQL service or an external one"
  echo "provided by you or your institution, in which case you will be asked for"
  echo "its hostname and other pertinent information."
  ask_for_input "Use embedded LOCKSS PostgreSQL DB Service?" "$(to_yes_no_or_blank ${USE_LOCKSS_POSTGRES})" Y
  if is_yes "${ANS}"; then
    USE_LOCKSS_POSTGRES=true
    LOCKSS_POSTGRES_HOST='lockss-postgres-service'
    LOCKSS_POSTGRES_PORT=5432
    LOCKSS_POSTGRES_USER="LOCKSS"
    LOCKSS_POSTGRES_SCHEMA=${LOCKSS_POSTGRES_USER}
    LOCKSS_DBNAME_PREFIX="Lockss"
  else
    USE_LOCKSS_POSTGRES=false

    ask_for_input "Fully qualified hostname (FQDN) of PostgreSQL host" "${LOCKSS_POSTGRES_HOST}" "${LOCKSS_HOSTNAME}"
    LOCKSS_POSTGRES_HOST=${ANS}

    ask_for_input "Port used by PostgreSQL host" "${LOCKSS_POSTGRES_PORT}" 5432
    LOCKSS_POSTGRES_PORT=${ANS}

    ask_for_input "Schema for PostgreSQL service" "${LOCKSS_POSTGRES_SCHEMA}" "LOCKSS"
    LOCKSS_POSTGRES_SCHEMA=${ANS}

    ask_for_input "Database name prefix for PostgreSQL service" "${LOCKSS_DBNAME_PREFIX}" "Lockss"
    LOCKSS_DBNAME_PREFIX=${ANS}

    ask_for_input "Login name for PostgreSQL service" "${LOCKSS_POSTGRES_USER}" "LOCKSS"
    LOCKSS_POSTGRES_USER=${ANS}

  fi

  ask_for_password "Password for PostgreSQL database" "${LOCKSS_DB_PASSWD}" "" "lockss-postgres-pass"
  LOCKSS_DB_PASSWD="${PASSWD_HASH}"
  if [ -n "${PASSWD_CLEAR}" ]; then
      Add_Secret lockss-postgres-pass "${PASSWD_CLEAR}"
  fi

  ask_for_input "Would you like to configure a Solr index for use with LOCKSS? (optional)" "$(to_yes_no_or_blank ${ENABLE_SOLR})" N
  if is_yes "${ANS}"; then
    ENABLE_SOLR=true

    #check Solr service
    echo "You may use either the embedded Solr service or an external one"
    echo "provided by you or your institution, in which case you will be asked for"
    echo "its hostname and other pertinent information."
    ask_for_input "Use embedded LOCKSS Solr Service?" "$(to_yes_no_or_blank ${USE_LOCKSS_SOLR})" N
    if is_yes "${ANS}"; then
      USE_LOCKSS_SOLR=true
      LOCKSS_SOLR_HOST='lockss-solr-service'
      LOCKSS_SOLR_PORT='8983'
      LOCKSS_SOLR_CORE_REPO="lockss-repo"
    else
      USE_LOCKSS_SOLR=false
      ask_for_input "Fully qualified hostname (FQDN) of Solr host" "${LOCKSS_SOLR_HOST}" "${LOCKSS_HOSTNAME}"
      LOCKSS_SOLR_HOST=${ANS}

      ask_for_input "Port used by Solr host" "${LOCKSS_SOLR_PORT}" "8983"
      LOCKSS_SOLR_PORT=${ANS}

      ask_for_input "Solr core repo name" "${LOCKSS_SOLR_CORE_REPO}" 'lockss-repo'
      LOCKSS_SOLR_CORE_REPO=${ANS}
    fi
    # Account for solr user
    ask_for_input "User name for LOCKSS Solr access" "${LOCKSS_SOLR_USER}" "${LOCKSS_ADMIN_USER}"
    LOCKSS_SOLR_USER=${ANS}

    ask_for_password "Password for LOCKSS Solr access" "${LOCKSS_SOLR_PASSWD}" "" "lockss-solr-pass"
    LOCKSS_SOLR_PASSWD="${PASSWD_HASH}"
    if [ -n "${PASSWD_CLEAR}" ]; then
      LOCKSS_SOLR_PASSWD_HASH=$(${SCRIPTS_DIR}/solrpass.sh ${PASSWD_CLEAR})
      Add_Secret solr-auth "${LOCKSS_SOLR_USER}:${PASSWD_CLEAR}"
      Add_Secret lockss-solr-pass "${PASSWD_CLEAR}"
    fi
  else
    ENABLE_SOLR=false
    USE_SOLR_INDEX=false
  fi
}

configure_artifact_index() {
   echo ""
   echo "Configuring Artifact Index..."
   echo ""

   ask_for_input "Use the PostgreSQL database to index artifacts (recommended)?" "$(to_yes_no_or_blank ${USE_PGSQL_INDEX})" Y
   if is_yes "${ANS}"; then
     USE_PGSQL_INDEX=true
     USE_SOLR_INDEX=false
   else
     USE_PGSQL_INDEX=false
   fi

   if ! ${USE_PGSQL_INDEX} && ${ENABLE_SOLR}; then
     ask_for_input "Use the Solr to index artifacts?" "$(to_yes_no_or_blank ${USE_SOLR_INDEX})" N
     if is_yes "${ANS}"; then
       USE_PGSQL_INDEX=false
       USE_SOLR_INDEX=true
     else
       USE_SOLR_INDEX=false
     fi
   fi

   if ! ${USE_PGSQL_INDEX} && ! ${USE_SOLR_INDEX}; then
     echo "Defaulting to Apache Derby for the artifact index"
     USE_DERBY_INDEX=true
   else
     USE_DERBY_INDEX=false
   fi
}

configure_crawler_services() {
  echo ""
  echo "Configuring Crawler Service..."
  echo ""
  #check crawler service
  CRAWLER_OK=N
  until is_yes ${CRAWLER_OK}; do
    ask_for_input "Use LOCKSS Crawler Service?" "$(to_yes_no_or_blank ${USE_LOCKSS_CRAWL})" Y
    if is_yes "${ANS}"; then
      USE_LOCKSS_CRAWL=true
      ask_for_input "Enable classic LOCKSS crawler?" "$(to_yes_no_or_blank ${LOCKSS_CLASSIC_CRAWLER_ENABLE})" Y
      if is_yes "${ANS}"; then
        LOCKSS_CLASSIC_CRAWLER_ENABLE=true
        CRAWLER_OK=Y
      else
        LOCKSS_CLASSIC_CRAWLER_ENABLE=false
      fi
      ask_for_input "Enable wget crawler?" "$(to_yes_no_or_blank ${LOCKSS_WGET_CRAWLER_ENABLE})" N
      if is_yes "${ANS}"; then
        LOCKSS_WGET_CRAWLER_ENABLE=true
        CRAWLER_OK=Y
      else
        LOCKSS_WGET_CRAWLER_ENABLE=false
      fi
    else
      USE_LOCKSS_CRAWL=false
      CRAWLER_OK=Y
    fi
  done
}

configure_services() {
  echo ""
  echo "Configuring LOCKSS services..."
  echo ""
  USE_LOCKSS_CFG=true

  configure_crawler_services

  # Metadata query service
  ask_for_input "Use LOCKSS Metadata Query Service?" "$(to_yes_no_or_blank ${USE_LOCKSS_MDQ})" Y
  if is_yes "${ANS}"; then
    USE_LOCKSS_MDQ=true
  else
    USE_LOCKSS_MDQ=false
  fi

  # Metadata extraction service
  ask_for_input "Use LOCKSS Metadata Extraction Service?" "$(to_yes_no_or_blank ${USE_LOCKSS_MDX})" Y
  if is_yes "${ANS}"; then
    USE_LOCKSS_MDX=true
  else
    USE_LOCKSS_MDX=false
  fi

  # SOAP service
  ask_for_input "Use LOCKSS SOAP Compatibility Service?" "$(to_yes_no_or_blank ${USE_LOCKSS_SOAP})" N
  if is_yes "${ANS}"; then
    USE_LOCKSS_SOAP=true
  else
    USE_LOCKSS_SOAP=false
  fi

  # Repository service is required
  USE_LOCKSS_REPO=true

  # HDFS service currently not supported
  #    ask_for_input "Use LOCKSS HDFS Service?" "$(to_yes_no_or_blank ${USE_LOCKSS_HDFS})" N
  #    if is_yes "${ANS}"; then
  #        USE_LOCKSS_HDFS=true
  #    else
  #        USE_LOCKSS_HDFS=false
  #    fi

  # Pywb
  echo "You can use Pywb and/or Openwayback for content replay..."
  ask_for_input "Use LOCKSS Pywb Service?" "$(to_yes_no_or_blank ${USE_LOCKSS_PYWB})" N
  if is_yes "${ANS}"; then
    USE_LOCKSS_PYWB=true
  else
    USE_LOCKSS_PYWB=false
  fi

  # OpenWayback
  ask_for_input "Use LOCKSS OpenWayback Service?" "$(to_yes_no_or_blank ${USE_LOCKSS_OPENWB})" N
  if is_yes "${ANS}"; then
    echo "Currently OpenWayback requires unauthenticated access to the LOCKSS Repository."
    ask_for_input "Okay to disable authentication for read-only requests to LOCKSS Repository Service?" "$(to_yes_no_or_blank ${USE_LOCKSS_OPENWB})" Y
    if is_yes "${ANS}"; then
      USE_LOCKSS_OPENWB=true
    else
      echo "Not enabling OpenWayback Service."
      USE_LOCKSS_OPENWB=false
    fi
  else
    USE_LOCKSS_OPENWB=false
  fi
}

# find os release name
os_release_name() {
  if [ -f /etc/os-release ]; then
    OS_NAME=$(grep '^PRETTY_NAME=' /etc/os-release)
    OS_NAME=$(echo "${OS_NAME}" | sed -e 's/.*=//')
    if [ -z "${OS_NAME}" ]; then
      OS_NAME=$(grep '^NAME=' /etc/os-release)
      OS_NAME=$(echo "${OS_NAME}" | sed -e 's/.*=//')
      OS_VER=$(grep '^VERSION=' /etc/os-release)
      OS_VER=$(echo "${OS_VER}" | sed -e 's/.*=//')
      if [ -n "${OS_NAME}" -o -n "${OS_VER}" ]; then
        OS_NAME="${OS_NAME} ${OS_VER}"
      fi
    fi
    OS_NAME=$(echo "${OS_NAME}" | sed -e 's/"//g')
    echo "${OS_NAME}"
  fi
}

# write_config_file file
write_config_file() {
  cat >"${1}" <<EOF
LOCKSS_CONFIG_VERSION="${LOCKSS_CONFIG_VERSION}"
LOCKSS_USER="${LOCKSS_USER:-lockss}"
LOCKSS_HOSTNAME="${LOCKSS_HOSTNAME}"
LOCKSS_IPADDR="${LOCKSS_IPADDR}"
LOCKSS_EXTERNAL_IPADDR="${LOCKSS_EXTERNAL_IPADDR}"
LOCKSS_V3_PORT="${LOCKSS_V3_PORT}"
LOCKSS_ACCESS_SUBNET="${LOCKSS_ACCESS_SUBNET}"
LOCKSS_MAILHUB="${LOCKSS_MAILHUB}"
LOCKSS_MAILHUB_USER="${LOCKSS_MAILHUB_USER}"
LOCKSS_MAILHUB_PASSWORD="${LOCKSS_MAILHUB_PASSWORD}"
LOCKSS_EMAIL="${LOCKSS_EMAIL}"
LOCKSS_PROPS_URL="${LOCKSS_PROPS_URL}"
LOCKSS_PROPS_PROXY="${LOCKSS_PROPS_PROXY}"
LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE="${LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE}"
LOCKSS_PLATFORM_VERSION="K8s ${K8S_VERSION}-1"
LOCKSS_PRESERVATION_GROUP="${LOCKSS_PRESERVATION_GROUP}"
LOCKSS_DATA_DIR="${LOCKSS_DATA_DIR}"
LOCKSS_REPO_HOST_DIRS="${LOCKSS_REPO_HOST_DIRS}"
LOCKSS_REPO_CONTAINER_DIRS="${LOCKSS_REPO_CONTAINER_DIRS}"
LOCKSS_LOGS_DIR="${LOCKSS_LOGS_DIR}"
LOCKSS_ADMIN_USER="${LOCKSS_ADMIN_USER}"
LOCKSS_ADMIN_PASSWD="${LOCKSS_ADMIN_PASSWD}"
LOCKSS_DB_PASSWD="${LOCKSS_DB_PASSWD}"
LOCKSS_TMPDIR="${LOCKSS_TMPDIR}"
LOCKSS_SCRIPT_LOG_DIR="${LOCKSS_SCRIPT_LOG_DIR}"
LOCKSS_POSTGRES_HOST="${LOCKSS_POSTGRES_HOST}"
LOCKSS_POSTGRES_PORT="${LOCKSS_POSTGRES_PORT}"
LOCKSS_POSTGRES_USER="${LOCKSS_POSTGRES_USER}"
LOCKSS_POSTGRES_SCHEMA="${LOCKSS_POSTGRES_SCHEMA}"
LOCKSS_DBNAME_PREFIX="${LOCKSS_DBNAME_PREFIX}"
LOCKSS_SOLR_HOST="${LOCKSS_SOLR_HOST}"
LOCKSS_SOLR_PORT=${LOCKSS_SOLR_PORT}
LOCKSS_SOLR_CORE_REPO="${LOCKSS_SOLR_CORE_REPO}"
LOCKSS_SOLR_USER="${LOCKSS_SOLR_USER}"
LOCKSS_SOLR_PASSWD="${LOCKSS_SOLR_PASSWD}"
LOCKSS_SOLR_PASSWD_HASH="${LOCKSS_SOLR_PASSWD_HASH}"
LOCKSS_CLEAR_TMPDIR="${LOCKSS_CLEAR_TMPDIR:-yes}"
LOCKSS_TIMEZONE="${LOCKSS_TIMEZONE}"
LOCKSS_CONTAINER_SUBNETS="${LOCKSS_CONTAINER_SUBNETS}"
LOCKSS_CLASSIC_CRAWLER_ENABLE="${LOCKSS_CLASSIC_CRAWLER_ENABLE}"
LOCKSS_WGET_CRAWLER_ENABLE="${LOCKSS_WGET_CRAWLER_ENABLE}"
PREV_CNI0_SUBNET="${CNI0_SUBNET}"
KUBECTL_CMD="${KUBECTL_CMD}"
USE_LOCKSS_CFG="${USE_LOCKSS_CFG:-true}"
USE_LOCKSS_MDQ="${USE_LOCKSS_MDQ}"
USE_LOCKSS_MDX="${USE_LOCKSS_MDX}"
USE_LOCKSS_POL="${USE_LOCKSS_POL:-true}"
USE_LOCKSS_CRAWL="${USE_LOCKSS_CRAWL}"
USE_LOCKSS_SOAP="${USE_LOCKSS_SOAP}"
USE_LOCKSS_REPO="${USE_LOCKSS_REPO}"
USE_LOCKSS_POSTGRES="${USE_LOCKSS_POSTGRES}"
USE_LOCKSS_SOLR="${USE_LOCKSS_SOLR}"
USE_LOCKSS_HDFS="${USE_LOCKSS_HDFS:-false}"
USE_LOCKSS_PYWB="${USE_LOCKSS_PYWB}"
USE_LOCKSS_OPENWB="${USE_LOCKSS_OPENWB}"
ENABLE_SOLR="${ENABLE_SOLR}"
USE_DERBY_INDEX="${USE_DERBY_INDEX}"
USE_PGSQL_INDEX="${USE_PGSQL_INDEX}"
USE_SOLR_INDEX="${USE_SOLR_INDEX}"
EOF
  OS_NAME="$(os_release_name)"
  if [ -n "${OS_NAME}" ]; then
    echo "OS_NAME=\"${OS_NAME}\"" >>"${1}"
  fi
}

write_k8s_cfg() {
  cat >"${1}" <<EOF
K8S_FLAVOR="${K8S_FLAVOR}"
K8S_VERSION="${K8S_VERSION}"
KUBECTL_CMD="${KUBECTL_CMD}"
EOF
  if [ -n "${K3S_VERSION}" ]; then
    echo "K3S_VERSION=\"${K3S_VERSION}\"" >>"${1}"
  fi
  if [ -n "${RESOLV_CONF_CONFIG}" ]; then
    echo "RESOLV_CONF_CONFIG=\"${RESOLV_CONF_CONFIG}\"" >>"${1}"
  fi
}

# build_config_file file user
build_config_file() {
  echo "Building config file ${1} for user ${2}..."
  Clear_Secrets
  CONFIG_OK=N
  # Arrange to skip "Ok to store" question iff no questions were asked
  # (in replay mode)
  OK_TO_STORE_WITHOUT_CONFIRMATION="Y"

  until is_yes ${CONFIG_OK}; do
    HOSTNAME_OK=N
    until is_yes ${HOSTNAME_OK}; do
      ask_for_input "Fully qualified hostname (FQDN) of this machine" "${LOCKSS_HOSTNAME}" "${LOCAL_HOSTNAME}"
      if valid_hostname "${ANS}"; then
        LOCKSS_HOSTNAME="${ANS}"
        HOSTNAME_OK=Y
      else
        echo "Illegal hostname: ${ANS}"
      fi
    done

    IP_OK=N
    until is_yes ${IP_OK}; do
      ask_for_input "IP address of this machine" "${LOCKSS_IPADDR}" "${LOCAL_IPADDR}"
      if valid_ip4_address "${ANS}"; then
        LOCKSS_IPADDR="${ANS}"
        IP_OK=Y
      else
        echo "Illegal IPv4 address: ${ANS}"
      fi
    done
    NAT=N
    if [ "${LOCKSS_EXTERNAL_IPADDR}X" != X ]; then
      NAT=Y
    fi
    ask_for_input "Is this machine behind NAT?" "${NAT}"
    if is_yes "${ANS}"; then
      EXT_OK=N
      until is_yes ${EXT_OK}; do
        ask_for_input "External IP address for NAT" "${LOCKSS_EXTERNAL_IPADDR}"
        if valid_ip4_address ${ANS}; then
          LOCKSS_EXTERNAL_IPADDR=${ANS}
          EXT_OK=Y
        fi
      done
    else
      unset LOCKSS_EXTERNAL_IPADDR
    fi
    if [ "X${LOCKSS_ACCESS_SUBNET}" = "X" ]; then
      LOCKSS_ACCESS_SUBNET=$(echo ${LOCKSS_IPADDR} | sed 's/\.[0-9][0-9]*$/.0\/24/')
    fi
    SUBNET_OK=N
    until is_yes ${SUBNET_OK}; do
      ask_for_input "Initial subnet(s) for admin UI access" "${LOCKSS_ACCESS_SUBNET}"
      if valid_subnet_list "${ANS}"; then
        LOCKSS_ACCESS_SUBNET="${ANS}"
        SUBNET_OK=Y
      fi
    done

    CNI0_ADDR=$(ip -4 -o addr show dev cni0 | awk '{split($4,a,"/");print a[1]}')
    CNI0_SUBNET=$(echo ${CNI0_ADDR} | sed 's/\.[0-9][0-9]*$/.0\/24/')
    if [ -z "${LOCKSS_CONTAINER_SUBNETS}" ]; then
      LOCKSS_CONTAINER_SUBNETS="${CNI0_SUBNET}"
    elif [ -n "${CNI0_SUBNET}" -a "${LOCKSS_CONTAINER_SUBNETS}" != "${CNI0_SUBNET}" ]; then
      # The current value isn't what we would choose
      if [ -n "${PREV_CNI0_SUBNET}" -a "${LOCKSS_CONTAINER_SUBNETS}" = "${PREV_CNI0_SUBNET}" ]; then
        # It matches the previous CNI0 subnet, use new one by default
        echo "Container subnet has changed from ${PREV_CNI0_SUBNET} to ${CNI0_SUBNET}"
        LOCKSS_CONTAINER_SUBNETS="${CNI0_SUBNET}"
      elif [ -z "${PREV_CNI0_SUBNET}" ]; then
        # No record of previous CNI0_SUBNET, can't tell whether it
        # changed or user previously entered a different subnet
        echo "Container subnet was ${LOCKSS_CONTAINER_SUBNETS}, we think it should now be ${CNI0_SUBNET}"
        ask_for_input "Do you want to change it?" "" Y
        if is_yes "${ANS}"; then
          LOCKSS_CONTAINER_SUBNETS="${CNI0_SUBNET}"
        fi
      fi
    fi
    CONTAINER_SUBNET_OK=N
    until is_yes ${CONTAINER_SUBNET_OK}; do
      ask_for_input "Container subnet for inter-service access control" "${LOCKSS_CONTAINER_SUBNETS}"
      if valid_subnet "${ANS}"; then
        LOCKSS_CONTAINER_SUBNETS="${ANS}"
        CONTAINER_SUBNET_OK=Y
      fi
    done

    # LCAP V3 port
    ask_for_input "LCAP V3 protocol port" "${LOCKSS_V3_PORT}" 9729
    if [ "X${ANS}" != "X" ]; then
      LOCKSS_V3_PORT="${ANS}"
    fi

    # Mail relay
    # First set current value of NEED_USER iff we've asked this question before
    NEED_USER=
    if [ "X${LOCKSS_MAILHUB}" != X ]; then
      if [[ -n "${LOCKSS_MAILHUB_USER}" ]]; then
        NEED_USER=Y
      else
        NEED_USER=N
      fi
    fi
    ask_for_input "Mail relay for this machine" "${LOCKSS_MAILHUB}" localhost
    LOCKSS_MAILHUB="${ANS}"
    ask_for_input "Does the mail relay ${LOCKSS_MAILHUB} need a username and password?" "${NEED_USER}" N
    if is_yes "${ANS}"; then
      ask_for_input "User for ${LOCKSS_MAILHUB}" "${LOCKSS_MAILHUB_USER}"
      LOCKSS_MAILHUB_USER="${ANS}"
      ask_for_password "Password for ${LOCKSS_MAILHUB_USER}@${LOCKSS_MAILHUB}" "" "${LOCKSS_MAILHUB_PASSWORD}" ""
      LOCKSS_MAILHUB_PASSWORD="${PASSWD_CLEAR}"
    else
      LOCKSS_MAILHUB_USER=
      LOCKSS_MAILHUB_PASSWORD=
    fi
    EMAIL_OK=N
    until is_yes ${EMAIL_OK}; do
      ask_for_input "E-mail address for administrator" "${LOCKSS_EMAIL}"
      if [ "X${ANS}" != X ]; then
        LOCKSS_EMAIL="${ANS}"
        EMAIL_OK=Y
      fi
    done

    # Props URL
    ask_for_input "Configuration URL" "${LOCKSS_PROPS_URL}" "http://props.lockss.org:8001/demo/lockss.xml"
    LOCKSS_PROPS_URL="${ANS}"
    if echo ${LOCKSS_PROPS_URL} | grep -Eis "^https:" >/dev/null; then
      if [[ -n ${LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE} ]]; then
        LOCKSS_PROPS_AUTHENTICATE_SERVER=Y
      else
        LOCKSS_PROPS_AUTHENTICATE_SERVER=N
      fi
      ask_for_input "Verify configuration server authenticity?" "${LOCKSS_PROPS_AUTHENTICATE_SERVER}"
      if is_yes "${ANS}"; then
        ask_for_input "Server certificate keystore" "${LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE}" "lockss-ca"
        LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE="${ANS}"
      else
        unset LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE
      fi
    fi

    # Props proxy
    ask_for_input "Configuration proxy (host:port)" "${LOCKSS_PROPS_PROXY}" "NONE"
    LOCKSS_PROPS_PROXY="${ANS}"

    # Preservation group(s)
    ask_for_input "Preservation group(s)" "${LOCKSS_PRESERVATION_GROUP}" "demo"
    LOCKSS_PRESERVATION_GROUP="${ANS}"

    HAD_DATA_DIR=
    if [ "X${LOCKSS_DATA_DIR}" != X ]; then
      HAD_DATA_DIR=Y
    fi
    # Data storage base
    DATA_PATHS_OK=N
    until is_yes ${DATA_PATHS_OK}; do
      ask_for_input "Root path for state data storage" "${LOCKSS_DATA_DIR}"
      if [ "X${ANS}" != X ]; then
        LOCKSS_DATA_DIR="$(normalize_path ${ANS})"
        DATA_PATHS_OK=Y
      fi
    done

    # Content storage base(s)
    CONTENT_PATHS_OK=N
    until is_yes ${CONTENT_PATHS_OK}; do
      ask_for_input "Root paths for content storage" "${LOCKSS_REPO_HOST_DIRS}" "${LOCKSS_DATA_DIR}"
      if [ "X${ANS}" != X ]; then
        tmp_repo_host_dirs="${ANS}"
        IFS=';' read -r -a newPaths <<< "${tmp_repo_host_dirs}"
        for ((i=0; i<${#newPaths[@]}; i++)); do
          newPaths[i]="$(normalize_path ${newPaths[i]})"
          repoDirs[i]="/content$i"
        done
        new_repo_vols=$( IFS=';' ; echo "${newPaths[*]}" )
        [ "$new_repo_vols" = "${LOCKSS_REPO_HOST_DIRS}" ] || echo "If you have removed any data storage directories you must run repo cache updater."
        LOCKSS_REPO_HOST_DIRS="${new_repo_vols}"
        LOCKSS_REPO_CONTAINER_DIRS=$( IFS=';' ; echo "${repoDirs[*]}" )
        CONTENT_PATHS_OK=Y
      fi
    done

    # Log dir base
    LOG_PATHS_OK=N
    until is_yes ${LOG_PATHS_OK}; do
      ask_for_input "Root path for log data storage" "${LOCKSS_LOGS_DIR}" "${LOCKSS_DATA_DIR}"
      if [ "X${ANS}" != X ]; then
        LOCKSS_LOGS_DIR="$(normalize_path ${ANS})"
        LOG_PATHS_OK=Y
      fi
    done

    # Tempdir dir base
    ask_for_input "Root path for temporary data storage (local storage preferred)" "${LOCKSS_TMPDIR}" "${LOCKSS_DATA_DIR}"
    LOCKSS_TMPDIR="$(normalize_path ${ANS})"
#    if [ "X${LOCKSS_SCRIPT_LOG_DIR}" = X ]; then
#      LOCKSS_SCRIPT_LOG_DIR="${LOCKSS_DATA_DIR}/lockss-script-logs"
#    fi
    # Script logs not configurable alwas set it to be relative to the LOCKSS_LOGS_DIR
#     ask_for_input "Directory for storing install script logs" "${LOCKSS_SCRIPT_LOG_DIR}" "${LOCKSS_DATA_DIR}/lockss-script-logs"
#     LOCKSS_SCRIPT_LOG_DIR="$(normalize_path ${ANS})"

    LOCKSS_SCRIPT_LOG_DIR=${LOCKSS_LOGS_DIR}/lockss-script-logs

    # Admin UI user/pass
    USER_OK=N
    until is_yes ${USER_OK}; do
      ask_for_input "User name for web UI administration" "${LOCKSS_ADMIN_USER}"
      if [ "X${ANS}" != X ]; then
        LOCKSS_ADMIN_USER="${ANS}"
        USER_OK=Y
      fi
    done
    ask_for_password "Password for web UI administration user ${LOCKSS_ADMIN_USER}" "${LOCKSS_ADMIN_PASSWD}" "" "lockss-ui-pass lockss-auth"
    LOCKSS_ADMIN_PASSWD="${PASSWD_HASH}"
    if [ -n "${PASSWD_CLEAR}" ]; then
      Add_Secret lockss-ui-pass "${PASSWD_CLEAR}"
      Add_Secret lockss-auth "${LOCKSS_ADMIN_USER}:${PASSWD_CLEAR}"
    fi

    # Configure databases
    configure_databases
    # Configure artifact index for Repository Service
    configure_artifact_index
    # Configure the individual services
    configure_services

    TMP_CONFIG=${CONFIG_DIR}/config.tmp
    export LOCKSS_CONFIG_VERSION=2
    export LOCKSS_USER
    write_config_file ${TMP_CONFIG} ${LOCKSS_USER}
    echo
    echo "Configuration:"
    cat ${TMP_CONFIG}

    ask_for_input "OK to store this configuration?" "${OK_TO_STORE_WITHOUT_CONFIRMATION}" Y
    if is_yes "${ANS}"; then
      if ! cp ${TMP_CONFIG} ${1}; then
        echo "Config couldn't be copied to permanent file (probable permission problem); left in ${TMP_CONFIG}"
        exit 1
      fi
      rm -f ${TMP_CONFIG}
      Store_All_Secrets
      echo "Configuration stored"

      local STORAGE_ERRORS=
      setup_storage_dirs ${SYSTEM_CONF_FILE} ${CONFIG_USER} || STORAGE_ERRORS=1

      CONFIG_OK=Y

      FILT_CONFIG=$(mktemp /tmp/filtconfig.XXXXXX)
      grep -Esv 'PASSW(OR)?D.*=' <${1} >>${FILT_CONFIG}
      mail_sent=""
      if [ $(command -v mail) >/dev/null ]; then
          if [ -z "${BYPASS_MAIL}" ]; then
              if mail -s "Config for ${2}@${LOCKSS_HOSTNAME}" ${LOCKSS_EMAIL} ${LOCKSS_TEAM} <${FILT_CONFIG}; then
                  mail_sent=1
              else
                echo "The attempt to mail configuration failed.  Please check your mail configuration."
              fi
          fi
      else
        echo "The 'mail' command isn't installed (or isn't on the PATH)."
      fi
      if [ -z "${mail_sent}" ]; then
        UNSENT_FILE=/tmp/unsent-lockss-config
        cp ${FILT_CONFIG} ${UNSENT_FILE}
        echo "Please send ${UNSENT_FILE} to ${LOCKSS_TEAM}."
      fi
      rm -f ${FILT_CONFIG}
    fi
  done
  if [ -n "${STORAGE_ERRORS}" ]; then
      echo
      echo "Storage directories have not been set up correctly.  Please either"
      echo " fix the ownership/permission problems then run scripts/setup-storage, or"
      echo " rerun scripts/configure-lockss and specify different directories."
      return 1
  fi
}

setup_k8s_cmd() {
  Check_K8s_Command
  KUBCTL_OK=false
  until is_yes ${KUBCTL_OK}; do
    ask_for_input "Command to use to execute kubectl commands" "${KUBECTL_CMD}"
    local first_word=$(echo "${ANS}" | awk '{print $1}')
    if [ $(command -v ${first_word}) >/dev/null ]; then
      KUBECTL_CMD="${ANS}"
      KUBCTL_OK=Y
    fi
  done
  echo "Kubectl command alias set to $KUBECTL_CMD"
  KUBECTL="${KUBECTL_CMD}"
  K8S_VERSION=$($KUBECTL_CMD version --short=true | grep 'Server Version:' | awk '{print $3}')
  write_k8s_cfg ${K8S_CONF_FILE}|| err_exit "Attempt to write ${K8S_CONF_FILE} failed."
}

usage() {
  echo "Usage: configure-lockss [-r|--replay] [-h|--help]"
  echo "  --replay  Prompt only for info not already in the config file. Useful when"
  echo "            running configure-lockss after upgrading to a new version of the"
  echo "            LOCKSS services."
  echo "  --help    Print this text."
  exit 2
}

is_replay=

# Parse command-line
while [[ -n "$1" ]]; do
  case "$1" in
  -h | --help)
    usage
    ;;
  -r | --replay)
    is_replay=1
    ;;
  *)
    usage
    ;;
  esac
  shift
done

CONFIG_LOGFILE="./lockss-configure.log"

# Redirect stdout and stderr to file

Log_Std "${CONFIG_LOGFILE}"

###
# Start
###
CONFIG_USER=$(whoami)

if $(am_i_root); then
  err_exit "This script should not be run as root. Run as the lockss user."
fi

OS_TYPE=$(uname -s)
if [ -z "${LOCKSS_TEAM}" ]; then
  LOCKSS_TEAM=lockssdiag@lockss.org
fi
umask 002
LOCKSS_USER="${LOCKSS_USER:-lockss}"
LOCAL_HOSTNAME=$(hostname -f 2>/dev/null) || LOCAL_HOSTNAME=$(uname -n 2>/dev/null)

echo "-------------------------------------------------------------"
echo "$(${SCRIPTS_DIR}/installer-version)"
echo "-------------------------------------------------------------"

case ${OS_TYPE} in
Linux)
  LOCKSS_HOME=
  SHA256SUM=sha256sum
  READLINK="readlink -f"
  ;;
Darwin)
  LOCKSS_HOME=
  SHA256SUM=sha256sum
  READLINK="readlink"
  ;;
*)
  echo "${OS_TYPE} not supported"
  exit 1
  ;;
esac

LOCKSS_TIMEZONE=$(Get_Timezone)

[ -z "${LOCKSS_TIMEZONE}" ] && echo "Warning, timezone not set"
LOCAL_IPADDR=$(guess_ip_address)

declare -i CONFIG_COUNT

echo "LOCKSS host configuration for ${OS_TYPE}."
echo "For more information see README"

if [ -r "${SYSTEM_CONF_FILE}" ]; then
  echo "Setting defaults from existing config: ${SYSTEM_CONF_FILE}"
  read_config ${SYSTEM_CONF_FILE}
fi
# support for alternate kubectl command
if [ -r "${K8S_CONF_FILE}" ]; then
  echo "Reading Kubernetes config: ${K8S_CONF_FILE}"
  read_config ${K8S_CONF_FILE}
fi
echo "Checking system state..."

# Sanity checks
if [ -z "${BYPASS_KUBE_COMMANDS}" ]; then
  setup_k8s_cmd
  Check_Runnable
else
  echo "Bypassing Check_Runnable and KUBECTL commands"
  kubectl_cmd() {
    echo "Bypassing kubectl, simulating success of" >&2
    echo "kubectl $*" >&2
    return 0
  }
fi

#get the number of stacks
case "${1}" in
'') CONFIG_COUNT=1 ;;
[1-9]) CONFIG_COUNT="${1}" ;;
  *) echo "Invalid number of parallel stacks: ${1}" ; exit 1 ;;
esac

#build config file
echo "Building config for ${CONFIG_COUNT} stacks on ${OS_TYPE} for user ${CONFIG_USER}..."
if build_config_file ${SYSTEM_CONF_FILE} ${CONFIG_USER} ${CONFIG_COUNT} ; then
    Copy_Configured_Lockss_Version
    echo "Run scripts/start-lockss to launch the LOCKSS stack 'lockss-stack'..."
    exit 0
else
  echo
  echo "Some problems were encountered.  They must be fixed before launching the"
  echo " LOCKSS stack with scripts/start-lockss"
  exit 1
fi
