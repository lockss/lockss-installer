#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# assemble-lockss - Generate and assemble files needed to run a LOCKSS stack

# Copyright (c) 2000-2023, Board of Trustees of Leland Stanford Jr. University
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Usage: assemble-lockss [-h|--help] [-u|--update] <num stacks>
#
# Revision history:
# ---------------------------------------------------------------------------
PROGNAME=${0##*/}
VERSION="1.0"

##
## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

# shellcheck source=./_util
. "$_D0/_util"
# shellcheck source=./lib/mo
. "${_D0}/lib/mo"
# shellcheck source=./../config/system.cfg
# Source system config file
source_config


##
## Definitions
##
# Directories
USEROPTS_DIR="${CONFIG_DIR}/useropts"
SERVICES_DIR="${TEMPLATES_DIR}/svcs"
MK_DIR="${TEMPLATES_DIR}/mk"

# Files
ENV_TMPL="${CONFIG_DIR}/env.mustache"
OPT_ENV_TMPL="${CONFIG_DIR}/env.mustache.opt"
UPGRADE_ENV_TMPL="${CONFIG_DIR}/env.mustache.upgrade"
OPT_POSTGRES_FILE="${USEROPTS_DIR}/lockss-postgres_opt"
EMPTY_LOCKSS_TXT="${TEMPLATES_DIR}/blank_lockss.txt"
EMPTY_LOCKSS_OPT="${TEMPLATES_DIR}/blank_lockss.opt"


# Variables
declare -i STACK_COUNT=1
declare -a secrets=("lockss-ui-pass" "lockss-auth" "lockss-postgres-pass")
declare -a global_confs=(
  "lockss-cluster"
  "lockss-bootstrap"
  "repo-properties"
  "lockss-solr-log4j2-xml"
  "lockss-postgresql")
declare -a SERVICES

declare -a -r LOCKSS_OWNED_SERVICE=("cfg" "mdq" "mdx" "pol" "crawl" "soap" "repo" "solr")
declare -A -r SERVICE_CONFS=(
 [cfg]="cfg-service"
 [mdq]="mdq-service"
 [mdx]="mdx-service"
 [pol]="pol-service"
 [crawl]="crawl-service"
 [repo]="repo-service"
 [soap]="soap-service"
)

STACK_PREFIX="lockss-stack"
STACK_DIRS=(${DOCKER_CONFIGS_DIR}/*/)
NUM_STACKS=${#STACK_DIRS[@]}
STACK_NUM=0
PORT_BASE=245
PULL_POLICY="IfNotPresent"
# the string "false" will be treated as an empty value for the purposes of conditionals.
MO_FALSE_IS_EMPTY=true

clean_up() { # Perform pre-exit housekeeping
  log_script_exit  "${PROGNAME}"
}

logger_error_exit() {
  logger_fatal "${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    logger_error_exit "Program interrupted by user"
    ;;
  TERM)
    logger_error "Program terminated"
    graceful_exit
    ;;
  *)
    logger_error_exit "Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help]  [-u|--update] [-s|--services] [<num stacks>]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Generate files needed to run a LOCKSS stack and assemble them for deployment.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  -u, --update  force update of LOCKSS docker images
  -s, --services  A semicolon seperated list of services to deploy
  <num stacks> Optional number of stacks to run on this host.

_EOF_
  return
}

# $1=file $2=blankfile
Config_Or_Blank() {
  if [ -f "${1}/${2}" ]; then
    echo "${1}/${2}"
  else
    echo "${1}/${3}"
  fi
}

Check_Physical_Volumes() {
  if [ -z "${LOCKSS_DATA_DIR}" ]; then
    logger_error_exit "LOCKSS_DATA_DIR is not set; exiting"
  fi
  if  [ -z "${LOCKSS_LOGS_DIR}" ]; then
    logger_error_exit "LOCKSS_LOGS_DIR is not set; exiting"
  fi
  if [ -z "${LOCKSS_TMPDIR}" ]; then
    logger_error_exit "LOCKSS_TMPDIR are not set; exiting"
  fi
}

# Expand {{#additional_ports svc}} ... {{/additional_ports}} sections.
# For each service in svcs, if the variable SVC_PORTS_ADDITIONAL is a
# semicolon-separated list of strings of the form
# port-mapping-name:host-port:container-port , the contants of the
# {{#additional_ports xxx}} section will be expanded, with
# __PORT_NAME__, __HOST_PORT__, and __CONTAINER_PORT__ replaced by
# port-mapping-name, host-port, and container-port.
additional_ports() {
  portsvar="${1}_PORTS_ADDITIONAL"
  IFS=';' read -r -a ports <<< "${!portsvar}"
  local content=$(cat)
  for port in "${ports[@]}"; do
    IFS=':' read portname host_port container_port <<< "$port"
    echo "$content" | sed "s/__PORT_NAME__/${portname}/; s/__HOST_PORT__/${host_port}/; s/__CONTAINER_PORT__/${container_port}/; "
  done
}

ensure_writable_dir() {
  local DIR="$1"
  local USER=$(stat -c '%u' ${DIR})
  if [ $USER -eq $LOCKSS_UID ]; then
     return 0
  else
    logger_error_exit "${DIR} is not writable by ${LOCKSS_USER}. Run scripts/fix-permissions."
  fi
}

ensure_lockss_owner() {
  local stack=$1
  for svc in "${SERVICES[@]}"; do
    if [[ " ${LOCKSS_OWNED_SERVICE[@]} " =~ " ${svc} " ]]; then
      local data_dir=${LOCKSS_DATA_DIR}/$stack-${svc}-data
      logger_debug "Checking files in $data_dir"
      if ! find "${data_dir}" \! -user ${LOCKSS_UID}  >/dev/null; then
        logger_error_exit "${data_dir} contains files not owned by user lockss. Run scripts/fix-permissions"
      fi
      local logs_dir=${LOCKSS_LOGS_DIR}/$stack-${svc}-logs
      logger_debug "Checking files in $logs_dir"
      if ! find "${logs_dir}" \! -user ${LOCKSS_UID}  >/dev/null; then
        logger_error_exit "${logs_dir} contains files not owned by user lockss. Run scripts/fix-permissions"
      fi
      local tmp_dir=${LOCKSS_TMPDIR}/$stack-${svc}-tmp
      logger_debug "Checking files in $tmp_dir"
      if ! find "${tmp_dir}" \! -user ${LOCKSS_UID}  >/dev/null; then
        logger_error_exit "${tmp_dir} contains files not owned by user lockss. Run scripts/fix-permissions"
      fi
    fi
  done
}

# Create configs for each stack
add_stack_configs() {
  local stack=$1
  local stack_path="${DOCKER_CONFIGS_DIR}/$stack"
  local key
  # Create the global configs
  logger_debug "Adding global config files"
  for gconf in "${global_confs[@]}"; do
    key=${gconf}
    if ! kubectl_lockss create configmap ${key} --namespace=${LOCKSS_NAMESPACE} --from-file=${key}=$(Config_Or_Blank $stack_path "${gconf}" "blank_lockss") | logger_debug; then
      logger_error_exit "${_0}: error creating config $stack-${gconf}"
    fi
    if ! kubectl_lockss create configmap ${key}-opt --namespace=${LOCKSS_NAMESPACE} --from-file=${key}-opt=$(Config_Or_Blank $stack_path "${gconf}_opt" "blank_lockss_opt") | logger_debug; then
      logger_error_exit "${_0}: error creating config $stack-${gconf}_opt"
    fi
  done
  # Create the configs for each lockss service
  logger_debug "Adding service config files"
  for svc in "${SERVICES[@]}"; do
    if [ "${SERVICE_CONFS[$svc]}X" != X ]; then
      key=${SERVICE_CONFS[$svc]}
      logger_debug "adding service config ${key}..."
      if ! kubectl_lockss create configmap ${key} --namespace=${LOCKSS_NAMESPACE} --from-file=${key}=$(Config_Or_Blank $stack_path "${key}" "blank_lockss") | logger_debug; then
      logger_error_exit "${_0}: error creating config ${key}"
      fi
      if ! kubectl_lockss create configmap ${key}-opt --namespace=${LOCKSS_NAMESPACE} --from-file=${key}-opt=$(Config_Or_Blank $stack_path "${key}-opt" "blank_lockss_opt") | logger_debug; then
      logger_error_exit "${_0}: error creating config ${key}-opt"
      fi
    fi
  done
}


# Add shared stack elements
add_stack_shared() {
  local stack=$1
  local mk_dir="${DOCKER_CONFIGS_DIR}/$stack/mk"
  logger_debug "Clearing old deployments..."
  kubectl_lockss delete deployments -l lockss-stack-id=${stack} | logger_debug
  logger_debug "Clearing old  configuration maps..."
  kubectl_lockss delete configmaps --all | logger_debug
#  logger_debug "Applying storage class: local-storage from ${mk_dir}/local-storage.yaml"
#  kubectl_cmd apply -f "${mk_dir}/local-storage.yaml" | logger_debug
}

check_stack_solr() {
  local stack=$1

  local SOLR_HOME_PATH="${LOCKSS_DATA_DIR}/${stack}-solr-data"
  local REPO_DATA_PATH="${LOCKSS_DATA_DIR}/${stack}-repo-data"
  local INDEX_STATE_DIR="${REPO_DATA_PATH}/state/index"

  local CORE_PATH="${SOLR_HOME_PATH}/data"
  local SOLR_FILE="${SOLR_HOME_PATH}/solr.xml"
  local OLD_REPO="${SOLR_HOME_PATH}/${SOLR_CORE_REPO}"
#  local SOLR_CONFIG_PATH="${SOLR_HOME_PATH}/configsets/lockss"
  local SOLR_SECURITY_PLUGIN="security.json"
  logger_debug "Checking Solr installation at ${SOLR_HOME_PATH}..."

  if [ -d "${OLD_REPO}" ]; then
    logger_error_exit "You are attempting to run with an older version without updating, please run upgrade script"
  fi

  logger_debug "Checking Solr installation for essential files..."

  # Read version available from lockss-installer's config directory
  local NEW_SOLR_HOME_VERSION="`cat ${CONFIG_DIR}/solr/solr-release`"
  local OLD_SOLR_HOME_VERSION="0.0.0"

  # Read version used for the existing Solr index is it exists
  if [ -e "${SOLR_HOME_PATH}/solr-release" ]; then
    OLD_SOLR_HOME_VERSION="`cat ${CONFIG_DIR}/solr/solr-release`"
  fi

  if [ ! -e "${SOLR_FILE}" ]; then
    # Prepare Solr home directory for the first time
    logger_info "Preparing Solr home '${SOLR_HOME_PATH}' for new install..."

    # Ensure the Solr home directory is writable
    ensure_writable_dir ${SOLR_HOME_PATH} ||
      logger_error_exit "Unable to write to ${SOLR_HOME_PATH}"

    # Copy Solr home and configuration
    cp -r "${CONFIG_DIR}"/solr/* "${SOLR_HOME_PATH}" > /dev/null ||
      logger_error_exit "Unable to install LOCKSS Solr files, exiting..."

    # Create Solr artifact index state directory
    mkdir -p ${INDEX_STATE_DIR}/solr
  elif compare_versions_lt "${OLD_SOLR_HOME_VERSION}" "${NEW_SOLR_HOME_VERSION}"; then
    # Solr home exists from previous installation but needs an upgrade
    logger_info "Upgrading Solr home '${SOLR_HOME_PATH}'..."

    # Move existing Solr index out of the way
    mv ${SOLR_HOME_PATH} ${SOLR_HOME_PATH}."`date +%Y%m%d`"

    # Move existing artifact index state out of the way if it exists
    if [ -d ${INDEX_STATE_DIR} ]; then
      mv ${INDEX_STATE_DIR} ${INDEX_STATE_DIR}."`date +%Y%m%d`"
    fi

    # Create new Solr home directory and ensure it is writable
    mkdir ${SOLR_HOME_PATH}
    ensure_writable_dir ${SOLR_HOME_PATH} ||
      logger_error_exit "Unable to write to ${SOLR_HOME_PATH}"

    # Copy Solr home and configuration
    cp -r "${CONFIG_DIR}"/solr/* "${SOLR_HOME_PATH}" > /dev/null ||
      logger_error_exit "Unable to install LOCKSS Solr files, exiting..."

    # Create Solr artifact index state directory
    mkdir -p ${INDEX_STATE_DIR}/solr

    # Signal to the repository that a reindex is needed
    touch ${INDEX_STATE_DIR}/reindex
  fi

  src_plugin_file="${STACK_CONFIG_DIR}/${SOLR_SECURITY_PLUGIN}"
  dst_plugin_file="${SOLR_HOME_PATH}/${SOLR_SECURITY_PLUGIN}"

  ensure_writable_dir ${SOLR_HOME_PATH} ||
      logger_error_exit "Unable to write to ${SOLR_HOME_PATH}"
  cp "${src_plugin_file}" "${dst_plugin_file}" ||
      logger_error_exit "Unable to install solr security file exiting..."
}

KEYSTORE_EXTS=".pkcs12 .jceks .jks"

check_stack_poller() {
  local stack=$1

  local KEYS_SRC_PATH="${CONFIG_DIR}/keys"
  local KEYS_DST_PATH="${LOCKSS_DATA_DIR}/${stack}-pol-data/keys"
  local KEYS_LOAD_PATH="/data/keys"
  local PRIV_EXT=$(find_first_file "${KEYSTORE_EXTS}" "${KEYS_SRC_PATH}/${LOCKSS_HOSTNAME}")
  local PRIV_KEYSTORE="${LOCKSS_HOSTNAME}${PRIV_EXT}"
  local PRIV_PASSFILE="${LOCKSS_HOSTNAME}.pass"
  local PUB_EXT=$(find_first_file "${KEYSTORE_EXTS}" "${KEYS_SRC_PATH}/pub-keystore")
  local PUB_KEYSTORE="pub-keystore${PUB_EXT}"

  if [ -r "${KEYS_SRC_PATH}/${PRIV_KEYSTORE}" -a -r "${KEYS_SRC_PATH}/${PRIV_PASSFILE}" ]; then
    if mkdir --mode=700 -p ${KEYS_DST_PATH}; then
      logger_debug "Enabling SSL for LCAP"
      cp "${KEYS_SRC_PATH}/${PRIV_KEYSTORE}" \
         "${KEYS_SRC_PATH}/${PUB_KEYSTORE}" \
         "${KEYS_DST_PATH}" || ( logger_warn "Unable to copy keys file(s), not enabling SSL" && return )
      local private_password=$(<"${KEYS_SRC_PATH}/${PRIV_PASSFILE}")
      Store_Secret lcap-ssl-pass "${private_password}"

      export LCAP_KEYSTORE_FILE="${KEYS_LOAD_PATH}/${PRIV_KEYSTORE}"
      export LCAP_PASSWORD_FILE="secret:lcapssl"
      export LCAP_PUB_KEYSTORE_FILE="${KEYS_LOAD_PATH}/${PUB_KEYSTORE}"
      # LCAP_USE_SSL must be undefined (not "false") if SSL not in use
      export LCAP_USE_SSL=true
    else
      logger_warn "Unable to create keys dir: ${KEYS_DST_PATH}, not enabling SSL"
    fi
  fi
}

# Create a mount points for each stack
add_stack_volumes() {
  local stack=$1
  mk_dir="${DOCKER_CONFIGS_DIR}/$stack/mk"

  logger_debug "Creating data and log volumes for $stack"
 for svc in "${SERVICES[@]}"; do
    logger_debug "Creating data and log volumes for $stack-${svc}..."
    mtpoint=${LOCKSS_DATA_DIR}/$stack-${svc}-data
    mkdir -p ${mtpoint} || logger_error_exit "Unable to create data dir: ${mtpoint}"
    mtpoint=${LOCKSS_LOGS_DIR}/$stack-${svc}-logs
    if [ "postgres" == "$svc" ]; then
      mkdir --mode=777 -p ${mtpoint} || logger_error_exit "Unable to create logs dir: ${mtpoint}"
    else
      mkdir -p ${mtpoint} || logger_error_exit "Unable to create logs dir: ${mtpoint}"
    fi
    mtpoint=${LOCKSS_TMPDIR}/$stack-${svc}-tmp
    mkdir --mode=1777 -p ${mtpoint} || logger_error_exit "Unable to create tmp dir: ${mtpoint}"
  done
  add_repo_content_volumes $stack
  kubectl_lockss apply -f ${mk_dir}/lockss-persistent-volumes.yaml | logger_debug
  # Slow, and only necessary if we rearrange users/permissions
  # ensure_lockss_owner $stack
}

add_repo_content_volumes() {
  local stack=$1
  IFS=';' read -r -a datadirs <<<"${LOCKSS_REPO_HOST_DIRS}"
  len=${#datadirs[@]}
  start=0
  logger_debug "Creating content volumes for $stack-repository-service..."
  for ((cnt = $start; cnt < $len; cnt++)); do
    mtpoint=${datadirs[$cnt]}/$stack-repo-content
    mkdir -p ${mtpoint} || logger_error_exit "Unable to create data dir: ${mtpoint}"
    mtname=$stack-repo-content${cnt}
  done
}

assemble_stack() {
  ensure_writable_dir $LOCKSS_DATA_DIR
  ensure_writable_dir $LOCKSS_LOGS_DIR
  ensure_writable_dir $LOCKSS_TMPDIR
  local stack=${STACK_PREFIX}$1
  logger_debug "Assembling stack $stack..."
  # Source env.sh
  source_env "${stack}"
  pushd . &>/dev/null
  cd "${DOCKER_CONFIGS_DIR}/$stack"|| logger_error_exit "Unable to cd to ${DOCKER_CONFIGS_DIR}/$stack."
  add_stack_shared ${stack}
  add_stack_volumes ${stack}
  check_stack_solr ${stack}
  add_stack_configs ${stack}
  popd &>/dev/null || return
}

generate_lockss() {
	logger_debug "Removing old generated configuration files..."
	rm -rf "${DOCKER_CONFIGS_DIR}"
  if [[ -f "${OPT_POSTGRES_FILE}" ]]; then
    OPT_POSTGRES="TRUE"
  fi
	logger_debug "Generating config files for $STACK_COUNT stacks..."
	for ((num = 1; num <= $STACK_COUNT; num++)); do
		export STACK_PORT_BASE=$((${PORT_BASE} + $num))
		if [ ${STACK_COUNT} = 1 ]; then
			STACK_NAME="${STACK_PREFIX}"
		else
			STACK_NAME="${STACK_PREFIX}$num"
		fi
    logger_debug "Generating files for stack $STACK_NAME"
    export STACK_NAME
    if [ -n "${LOCKSS_MIGRATION_LCAP_PORT}" ]; then
      export STACK_LCAP_LISTEN_PORT=$((${LOCKSS_MIGRATION_LCAP_PORT} + $num - 1))
    else
      export STACK_LCAP_LISTEN_PORT=$((${LOCKSS_V3_PORT} + $num - 1))
    fi
    export STACK_LCAP_IDENTITY_PORT=$((${LOCKSS_V3_PORT} + $num - 1))
    export STACK_CONFIG_DIR="${DOCKER_CONFIGS_DIR}/${STACK_NAME}"
    local stack_env_file="${STACK_CONFIG_DIR}/env.sh"
    local opt_stack_env_file="${stack_env_file}.opt"
    local upgrade_stack_env_file="${stack_env_file}.upgrade"
    local stack_compose_file="${STACK_CONFIG_DIR}/docker-compose.yml"
    logger_debug "Stack ${num} named ${STACK_NAME} is using port base of ${STACK_PORT_BASE}."
    mkdir -p "${STACK_CONFIG_DIR}"

    check_stack_poller "${STACK_NAME}"

    logger_debug "Generating the stack env.sh file..."
    mo "${ENV_TMPL}" >"${stack_env_file}"
    if [[ -f "${OPT_ENV_TMPL}" ]]; then
      mo "${OPT_ENV_TMPL}" >"${opt_stack_env_file}"
    fi
     if [[ -f "${UPGRADE_ENV_TMPL}" ]]; then
       mo "${UPGRADE_ENV_TMPL}" >"${upgrade_stack_env_file}"
     fi
   # Source env.sh
    source_env "${STACK_NAME}"

    logger_debug "Getting node hostname..."
    export NODE_HOSTNAME=$(kubectl_cmd get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="Hostname")].address}')
    logger_debug "Getting postgres password..."
    export POSTGRES_PASSWD=$(kubectl_lockss get secret lockss-postgres-pass -o jsonpath='{.data.lockss-postgres-pass}'| base64 --decode -)

    # The exported variables here are used by Mustache to populate the lockss-persistent-volumes.mustache
    # and lockss-repostiory-service.mustache and establish the mapping from .../lockss-stack-repo-content
    # to /contentN within the container.
    IFS=';' read -r -a datadirs <<<"${LOCKSS_REPO_HOST_DIRS}"
    len=${#datadirs[@]}

    declare -a REPO_NUMS
    for ((count = 0; count < $len; count++)); do
      REPO_NUMS[${count}]="$count"
      declare REPO_CONTENT_MAP_${count}=${datadirs[$count]}
      export REPO_CONTENT_MAP_${count}
    done
    export REPO_NUMS

    logger_debug "Generating the service deployments..."
    mkdir "${STACK_CONFIG_DIR}/svcs"
    for f in ${SERVICES_DIR}/*.mustache; do
      src="${f}"
      dst="${STACK_CONFIG_DIR}/svcs/$(basename "${f}" .mustache).yaml"
      logger_debug "Rendering ${src} to ${dst}..."
      mo --allow-function-arguments "${src}" >"${dst}"
    done
    logger_debug "Generating the microk8s files..."
    mk_dst="${STACK_CONFIG_DIR}/mk"
    mkdir "${mk_dst}"
#    cp "${MK_DIR}/${STORAGE_CLASS_FILE}" "${mk_dst}/${STORAGE_CLASS_FILE}"
    for f in ${MK_DIR}/*.mustache; do
      src="${f}"
      dst="${mk_dst}/$(basename "${f}" .mustache).yaml"
      logger_debug "Rendering ${src} to ${dst}..."
      mo "${src}" >"${dst}"
      envsubst < ${dst} > ${dst}.out
      mv ${dst}.out ${dst}
    done
    logger_debug "Generating lockss configuration files..."
    for f in ${TEMPLATES_DIR}/*.mustache; do
      src="${f}"
      dst="${STACK_CONFIG_DIR}/$(basename "${f}" .mustache)"
      logger_debug "Rendering ${src} to ${dst}..."
      mo "${src}" >"${dst}"
    done
    logger_debug "Generating the user configuration file templates..."
    for f in ${USEROPTS_DIR}/templates/*_opt.mustache; do
      if [[ -f "${f}" ]]; then
        src="${f}"
        dst="${STACK_CONFIG_DIR}/$(basename "${f}" _opt.mustache)-opt"
        logger_debug "Rendering ${src} to ${dst}..."
        mo "${src}" >"${dst}"
      fi
    done
    logger_debug "Moving the user configuration file..."
    for f in ${USEROPTS_DIR}/*_opt; do
      if [[ -f "${f}" ]]; then
        src="${f}"
        dst="${STACK_CONFIG_DIR}/$(basename "${f}" _opt)-opt"
        logger_debug "Rendering ${src} to ${dst}..."
        cp "${src}" "${dst}"
      fi
    done
  done
	logger_debug "Successfully regenerated stack components."
}

assemble_lockss() {

	NUM_STACKS=${#STACK_DIRS[@]}

	if [ ${NUM_STACKS} -eq 0 ]; then
		logger_error_exit "No configuration files have been generated, run generate-lockss first."
	elif [ ${NUM_STACKS} -eq 1 ]; then
		assemble_stack ""
	elif [ ${STACK_NUM} -eq 0 ]; then
		for ((num = 1; num <= $NUM_STACKS; num++)); do
			assemble_stack $num
		done
	elif [ -e "${DOCKER_CONFIGS_DIR}/${STACK_PREFIX}${STACK_NUM}" ]; then
		assemble_stack ${STACK_NUM}
	else
		logger_error_exit "Unable to find generated stack ${STACK_NUM}"
	fi
        Copy_Lockss_Version
	logger_debug "Successfully installed components."

}

##
## MAIN
##

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

logger_init
log_script_entry "${PROGNAME}"
umask 002

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  -s | --services)
    export REQ_SERVICES="$2"
    logger_debug "Adding list of service to assemble $REQ_SERVICES"
    shift; shift
    ;;
  -u | --update)
    PULL_POLICY="Always"
    logger_info "Will check for updated LOCKSS docker images"
    ;;
  [1-9])
    STACK_COUNT=$1
    ;;
  -* | --*)
    usage
    logger_error_exit "Unknown option $1"
    ;;
  *)
    logger_debug "Argument $1 to process..."
    ;;
  esac
  shift
done

# Sanity checks
if $(am_i_root); then
  logger_error_exit "This script should not be run as root. Run as the lockss user."
fi
logger_debug "Checking system..."
Check_Runnable
Check_Physical_Volumes

init_service_arrays

generate_lockss || logger_error_exit "Unable to generate needed components."
assemble_lockss || logger_error_exit "Unable to assemble all lockss components."
logger_info "LOCKSS is ready to deploy."
graceful_exit
