#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# Start-lockss - "Start the stopped or new LOCKSS stack."
# Copyright (c) 2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Usage: start-lockss [-h|--help] [-u|--update] [-a|--args ARGS_ADDITIONAL]
# Revision history:
# ---------------------------------------------------------------------------
PROGNAME=${0##*/}
VERSION="1.0"

#
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/_util"
# Source system config file
set -a
. "${CONFIG_DIR}/system.cfg"
set +a

UPDATE_ARG=""
WAIT_ARG=""


clean_up() { # Perform pre-exit housekeeping
  log_script_exit  "${PROGNAME}"
}

error_exit() {
  logger_error "${1:-"Unknown Error"}"
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    logger_error "Program terminated"
    graceful_exit
    ;;
  *)
    error_exit "Terminating on unknown signal"
    ;;
  esac
}

usage() {
	echo -e "Usage: $PROGNAME [-h|--help] [-u|--update] [-w|--wait] [-a|--args ARGS_ADDITIONAL]"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  "Generate, Assemble and Start a running LOCKSS stack."

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  -u, --update  force update of LOCKSS docker images
  -w, --wait Use a wait file to signal stack ready.
  -a, --args ARGS_ADDITIONAL  Add additional runtime options."
    Where 'ARGS_ADDITIONAL' are the arguments.

_EOF_
  return
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

logger_init
log_script_entry "${PROGNAME}"

ARGS_ADDITIONAL=""
# Parse command-line
while [[ $# -gt 0 ]]; do
  case $1 in
    -h | --help)
      help_message; graceful_exit ;;
    -u | --update)
      UPDATE_ARG="-u"
      logger_debug "Forcing update of LOCKSS docker images"
      shift
      ;;
    -w | --wait)
      WAIT_ARG="-w"
      logger_debug "Setting wait for file on deploy."
      shift
      ;;
    -a | --args)
      export ARGS_ADDITIONAL="$2"
      logger_info "Adding additional runtime args $ARGS_ADDITIONAL";
      shift; shift
    ;;
    -* | --*)
      usage
      error_exit "Unknown option $1" ;;
    *)
      logger_trace "Argument $1 to process..."
      shift
      ;;
  esac
done

# Main logic
Check_Runnable
Check_Configured
Check_Upgraded

if $(am_i_root); then
  error_exit "This script should not be run as root. Run as the lockss user."
fi

if $(is_lockss_running); then
  logger_warn "There is already a running lockss stack."
  error_exit "Call restart-lockss  to run lockss again."
fi

logger_debug "Scripts dir ${SCRIPTS_DIR}"

"${SCRIPTS_DIR}"/assemble-lockss ${UPDATE_ARG} || error_exit "Attempt to assemble lockss components failed."
"${SCRIPTS_DIR}"/deploy-lockss -a "$ARGS_ADDITIONAL" ${WAIT_ARG} || error_exit "Attempt to deploy lockss components failed."

graceful_exit

